/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.tweirtx.TBAV3.Client;
using com.tweirtx.TBAV3.Model;

namespace com.tweirtx.TBAV3.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDistrictApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;ModelEvent&gt;</returns>
        List<ModelEvent> GetDistrictEvents (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelEvent&gt;</returns>
        ApiResponse<List<ModelEvent>> GetDistrictEventsWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetDistrictEventsKeys (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetDistrictEventsSimple (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetDistrictEventsSimpleWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictRanking&gt;</returns>
        List<DistrictRanking> GetDistrictRankings (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictRanking&gt;</returns>
        ApiResponse<List<DistrictRanking>> GetDistrictRankingsWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetDistrictTeams (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetDistrictTeamsWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetDistrictTeamsKeys (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetDistrictTeamsKeysWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetDistrictTeamsSimple (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetDistrictTeamsSimpleWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of districts and their corresponding district key, for the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictList&gt;</returns>
        List<DistrictList> GetDistrictsByYear (int? year, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of districts and their corresponding district key, for the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictList&gt;</returns>
        ApiResponse<List<DistrictList>> GetDistrictsByYearWithHttpInfo (int? year, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventDistrictPoints</returns>
        EventDistrictPoints GetEventDistrictPoints (string eventKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventDistrictPoints</returns>
        ApiResponse<EventDistrictPoints> GetEventDistrictPointsWithHttpInfo (string eventKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictList&gt;</returns>
        List<DistrictList> GetTeamDistricts (string teamKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictList&gt;</returns>
        ApiResponse<List<DistrictList>> GetTeamDistrictsWithHttpInfo (string teamKey, string ifModifiedSince = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;ModelEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ModelEvent>> GetDistrictEventsAsync (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelEvent>>> GetDistrictEventsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetDistrictEventsKeysAsync (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetDistrictEventsSimpleAsync (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictRanking&gt;</returns>
        System.Threading.Tasks.Task<List<DistrictRanking>> GetDistrictRankingsAsync (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team district rankings for the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictRanking&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DistrictRanking>>> GetDistrictRankingsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetDistrictTeamsAsync (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetDistrictTeamsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetDistrictTeamsKeysAsync (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictTeamsKeysAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetDistrictTeamsSimpleAsync (string districtKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetDistrictTeamsSimpleAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of districts and their corresponding district key, for the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictList&gt;</returns>
        System.Threading.Tasks.Task<List<DistrictList>> GetDistrictsByYearAsync (int? year, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of districts and their corresponding district key, for the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DistrictList>>> GetDistrictsByYearAsyncWithHttpInfo (int? year, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventDistrictPoints</returns>
        System.Threading.Tasks.Task<EventDistrictPoints> GetEventDistrictPointsAsync (string eventKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventDistrictPoints)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDistrictPoints>> GetEventDistrictPointsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictList&gt;</returns>
        System.Threading.Tasks.Task<List<DistrictList>> GetTeamDistrictsAsync (string teamKey, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DistrictList>>> GetTeamDistrictsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DistrictApi : IDistrictApi
    {
        private com.tweirtx.TBAV3.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DistrictApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DistrictApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = com.tweirtx.TBAV3.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DistrictApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DistrictApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.tweirtx.TBAV3.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.tweirtx.TBAV3.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;ModelEvent&gt;</returns>
        public List<ModelEvent> GetDistrictEvents (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<ModelEvent>> localVarResponse = GetDistrictEventsWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelEvent&gt;</returns>
        public ApiResponse< List<ModelEvent> > GetDistrictEventsWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictEvents");

            var localVarPath = "/district/{district_key}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelEvent>)));
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;ModelEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelEvent>> GetDistrictEventsAsync (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<ModelEvent>> localVarResponse = await GetDistrictEventsAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelEvent>>> GetDistrictEventsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictEvents");

            var localVarPath = "/district/{district_key}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelEvent>)));
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetDistrictEventsKeys (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<string>> localVarResponse = GetDistrictEventsKeysWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetDistrictEventsKeysWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictEventsKeys");

            var localVarPath = "/district/{district_key}/events/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetDistrictEventsKeysAsync (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<string>> localVarResponse = await GetDistrictEventsKeysAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictEventsKeys");

            var localVarPath = "/district/{district_key}/events/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetDistrictEventsSimple (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<EventSimple>> localVarResponse = GetDistrictEventsSimpleWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public ApiResponse< List<EventSimple> > GetDistrictEventsSimpleWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictEventsSimple");

            var localVarPath = "/district/{district_key}/events/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EventSimple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetDistrictEventsSimpleAsync (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<EventSimple>> localVarResponse = await GetDistrictEventsSimpleAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictEventsSimple");

            var localVarPath = "/district/{district_key}/events/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EventSimple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictRanking&gt;</returns>
        public List<DistrictRanking> GetDistrictRankings (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<DistrictRanking>> localVarResponse = GetDistrictRankingsWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictRanking&gt;</returns>
        public ApiResponse< List<DistrictRanking> > GetDistrictRankingsWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictRankings");

            var localVarPath = "/district/{district_key}/rankings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictRankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DistrictRanking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DistrictRanking>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DistrictRanking>)));
        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictRanking&gt;</returns>
        public async System.Threading.Tasks.Task<List<DistrictRanking>> GetDistrictRankingsAsync (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<DistrictRanking>> localVarResponse = await GetDistrictRankingsAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of team district rankings for the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictRanking&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DistrictRanking>>> GetDistrictRankingsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictRankings");

            var localVarPath = "/district/{district_key}/rankings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictRankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DistrictRanking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DistrictRanking>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DistrictRanking>)));
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetDistrictTeams (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<Team>> localVarResponse = GetDistrictTeamsWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse< List<Team> > GetDistrictTeamsWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictTeams");

            var localVarPath = "/district/{district_key}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Team>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetDistrictTeamsAsync (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<Team>> localVarResponse = await GetDistrictTeamsAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetDistrictTeamsAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictTeams");

            var localVarPath = "/district/{district_key}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Team>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetDistrictTeamsKeys (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<string>> localVarResponse = GetDistrictTeamsKeysWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetDistrictTeamsKeysWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictTeamsKeys");

            var localVarPath = "/district/{district_key}/teams/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetDistrictTeamsKeysAsync (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<string>> localVarResponse = await GetDistrictTeamsKeysAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictTeamsKeysAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictTeamsKeys");

            var localVarPath = "/district/{district_key}/teams/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictTeamsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetDistrictTeamsSimple (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<TeamSimple>> localVarResponse = GetDistrictTeamsSimpleWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public ApiResponse< List<TeamSimple> > GetDistrictTeamsSimpleWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictTeamsSimple");

            var localVarPath = "/district/{district_key}/teams/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictTeamsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamSimple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamSimple>)));
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetDistrictTeamsSimpleAsync (string districtKey, string ifModifiedSince = null)
        {
             ApiResponse<List<TeamSimple>> localVarResponse = await GetDistrictTeamsSimpleAsyncWithHttpInfo(districtKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetDistrictTeamsSimpleAsyncWithHttpInfo (string districtKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling DistrictApi->GetDistrictTeamsSimple");

            var localVarPath = "/district/{district_key}/teams/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", Configuration.ApiClient.ParameterToString(districtKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictTeamsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamSimple>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamSimple>)));
        }

        /// <summary>
        ///  Gets a list of districts and their corresponding district key, for the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictList&gt;</returns>
        public List<DistrictList> GetDistrictsByYear (int? year, string ifModifiedSince = null)
        {
             ApiResponse<List<DistrictList>> localVarResponse = GetDistrictsByYearWithHttpInfo(year, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of districts and their corresponding district key, for the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictList&gt;</returns>
        public ApiResponse< List<DistrictList> > GetDistrictsByYearWithHttpInfo (int? year, string ifModifiedSince = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling DistrictApi->GetDistrictsByYear");

            var localVarPath = "/districts/{year}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarPathParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictsByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DistrictList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DistrictList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DistrictList>)));
        }

        /// <summary>
        ///  Gets a list of districts and their corresponding district key, for the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictList&gt;</returns>
        public async System.Threading.Tasks.Task<List<DistrictList>> GetDistrictsByYearAsync (int? year, string ifModifiedSince = null)
        {
             ApiResponse<List<DistrictList>> localVarResponse = await GetDistrictsByYearAsyncWithHttpInfo(year, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of districts and their corresponding district key, for the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DistrictList>>> GetDistrictsByYearAsyncWithHttpInfo (int? year, string ifModifiedSince = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling DistrictApi->GetDistrictsByYear");

            var localVarPath = "/districts/{year}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarPathParams.Add("year", Configuration.ApiClient.ParameterToString(year)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictsByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DistrictList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DistrictList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DistrictList>)));
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>EventDistrictPoints</returns>
        public EventDistrictPoints GetEventDistrictPoints (string eventKey, string ifModifiedSince = null)
        {
             ApiResponse<EventDistrictPoints> localVarResponse = GetEventDistrictPointsWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of EventDistrictPoints</returns>
        public ApiResponse< EventDistrictPoints > GetEventDistrictPointsWithHttpInfo (string eventKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling DistrictApi->GetEventDistrictPoints");

            var localVarPath = "/event/{event_key}/district_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventKey != null) localVarPathParams.Add("event_key", Configuration.ApiClient.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventDistrictPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventDistrictPoints>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventDistrictPoints) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventDistrictPoints)));
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of EventDistrictPoints</returns>
        public async System.Threading.Tasks.Task<EventDistrictPoints> GetEventDistrictPointsAsync (string eventKey, string ifModifiedSince = null)
        {
             ApiResponse<EventDistrictPoints> localVarResponse = await GetEventDistrictPointsAsyncWithHttpInfo(eventKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventKey">TBA Event Key, eg &#x60;2016nytr&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (EventDistrictPoints)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventDistrictPoints>> GetEventDistrictPointsAsyncWithHttpInfo (string eventKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'eventKey' is set
            if (eventKey == null)
                throw new ApiException(400, "Missing required parameter 'eventKey' when calling DistrictApi->GetEventDistrictPoints");

            var localVarPath = "/event/{event_key}/district_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventKey != null) localVarPathParams.Add("event_key", Configuration.ApiClient.ParameterToString(eventKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventDistrictPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventDistrictPoints>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventDistrictPoints) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventDistrictPoints)));
        }

        /// <summary>
        ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>List&lt;DistrictList&gt;</returns>
        public List<DistrictList> GetTeamDistricts (string teamKey, string ifModifiedSince = null)
        {
             ApiResponse<List<DistrictList>> localVarResponse = GetTeamDistrictsWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>ApiResponse of List&lt;DistrictList&gt;</returns>
        public ApiResponse< List<DistrictList> > GetTeamDistrictsWithHttpInfo (string teamKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new ApiException(400, "Missing required parameter 'teamKey' when calling DistrictApi->GetTeamDistricts");

            var localVarPath = "/team/{team_key}/districts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamKey != null) localVarPathParams.Add("team_key", Configuration.ApiClient.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamDistricts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DistrictList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DistrictList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DistrictList>)));
        }

        /// <summary>
        ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of List&lt;DistrictList&gt;</returns>
        public async System.Threading.Tasks.Task<List<DistrictList>> GetTeamDistrictsAsync (string teamKey, string ifModifiedSince = null)
        {
             ApiResponse<List<DistrictList>> localVarResponse = await GetTeamDistrictsAsyncWithHttpInfo(teamKey, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAV3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamKey">TBA Team Key, eg &#x60;frc254&#x60;</param>
        /// <param name="ifModifiedSince">Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DistrictList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DistrictList>>> GetTeamDistrictsAsyncWithHttpInfo (string teamKey, string ifModifiedSince = null)
        {
            // verify the required parameter 'teamKey' is set
            if (teamKey == null)
                throw new ApiException(400, "Missing required parameter 'teamKey' when calling DistrictApi->GetTeamDistricts");

            var localVarPath = "/team/{team_key}/districts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamKey != null) localVarPathParams.Add("team_key", Configuration.ApiClient.ParameterToString(teamKey)); // path parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamDistricts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DistrictList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DistrictList>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DistrictList>)));
        }

    }
}

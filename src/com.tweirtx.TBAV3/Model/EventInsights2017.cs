/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.tweirtx.TBAV3.Client.SwaggerDateConverter;

namespace com.tweirtx.TBAV3.Model
{
    /// <summary>
    /// Insights for FIRST STEAMWORKS qualification and elimination matches.
    /// </summary>
    [DataContract]
    public partial class EventInsights2017 :  IEquatable<EventInsights2017>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventInsights2017" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventInsights2017() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventInsights2017" /> class.
        /// </summary>
        /// <param name="AverageFoulScore">Average foul score. (required).</param>
        /// <param name="AverageFuelPoints">Average fuel points scored. (required).</param>
        /// <param name="AverageFuelPointsAuto">Average fuel points scored during auto. (required).</param>
        /// <param name="AverageFuelPointsTeleop">Average fuel points scored during teleop. (required).</param>
        /// <param name="AverageHighGoals">Average points scored in the high goal. (required).</param>
        /// <param name="AverageHighGoalsAuto">Average points scored in the high goal during auto. (required).</param>
        /// <param name="AverageHighGoalsTeleop">Average points scored in the high goal during teleop. (required).</param>
        /// <param name="AverageLowGoals">Average points scored in the low goal. (required).</param>
        /// <param name="AverageLowGoalsAuto">Average points scored in the low goal during auto. (required).</param>
        /// <param name="AverageLowGoalsTeleop">Average points scored in the low goal during teleop. (required).</param>
        /// <param name="AverageMobilityPointsAuto">Average mobility points scored during auto. (required).</param>
        /// <param name="AveragePointsAuto">Average points scored during auto. (required).</param>
        /// <param name="AveragePointsTeleop">Average points scored during teleop. (required).</param>
        /// <param name="AverageRotorPoints">Average rotor points scored. (required).</param>
        /// <param name="AverageRotorPointsAuto">Average rotor points scored during auto. (required).</param>
        /// <param name="AverageRotorPointsTeleop">Average rotor points scored during teleop. (required).</param>
        /// <param name="AverageScore">Average score. (required).</param>
        /// <param name="AverageTakeoffPointsTeleop">Average takeoff points scored during teleop. (required).</param>
        /// <param name="AverageWinMargin">Average margin of victory. (required).</param>
        /// <param name="AverageWinScore">Average winning score. (required).</param>
        /// <param name="HighKpa">An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match (required).</param>
        /// <param name="HighScore">An array with three values, high score, match key from the match with the high score, and the name of the match (required).</param>
        /// <param name="KpaAchieved">An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage. (required).</param>
        /// <param name="MobilityCounts">An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage. (required).</param>
        /// <param name="Rotor1Engaged">An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage. (required).</param>
        /// <param name="Rotor1EngagedAuto">An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage. (required).</param>
        /// <param name="Rotor2Engaged">An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage. (required).</param>
        /// <param name="Rotor2EngagedAuto">An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage. (required).</param>
        /// <param name="Rotor3Engaged">An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage. (required).</param>
        /// <param name="Rotor4Engaged">An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage. (required).</param>
        /// <param name="TakeoffCounts">An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage. (required).</param>
        /// <param name="UnicornMatches">An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage. (required).</param>
        public EventInsights2017(float? AverageFoulScore = default(float?), float? AverageFuelPoints = default(float?), float? AverageFuelPointsAuto = default(float?), float? AverageFuelPointsTeleop = default(float?), float? AverageHighGoals = default(float?), float? AverageHighGoalsAuto = default(float?), float? AverageHighGoalsTeleop = default(float?), float? AverageLowGoals = default(float?), float? AverageLowGoalsAuto = default(float?), float? AverageLowGoalsTeleop = default(float?), float? AverageMobilityPointsAuto = default(float?), float? AveragePointsAuto = default(float?), float? AveragePointsTeleop = default(float?), float? AverageRotorPoints = default(float?), float? AverageRotorPointsAuto = default(float?), float? AverageRotorPointsTeleop = default(float?), float? AverageScore = default(float?), float? AverageTakeoffPointsTeleop = default(float?), float? AverageWinMargin = default(float?), float? AverageWinScore = default(float?), List<string> HighKpa = default(List<string>), List<string> HighScore = default(List<string>), List<float?> KpaAchieved = default(List<float?>), List<float?> MobilityCounts = default(List<float?>), List<float?> Rotor1Engaged = default(List<float?>), List<float?> Rotor1EngagedAuto = default(List<float?>), List<float?> Rotor2Engaged = default(List<float?>), List<float?> Rotor2EngagedAuto = default(List<float?>), List<float?> Rotor3Engaged = default(List<float?>), List<float?> Rotor4Engaged = default(List<float?>), List<float?> TakeoffCounts = default(List<float?>), List<float?> UnicornMatches = default(List<float?>))
        {
            // to ensure "AverageFoulScore" is required (not null)
            if (AverageFoulScore == null)
            {
                throw new InvalidDataException("AverageFoulScore is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageFoulScore = AverageFoulScore;
            }
            // to ensure "AverageFuelPoints" is required (not null)
            if (AverageFuelPoints == null)
            {
                throw new InvalidDataException("AverageFuelPoints is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageFuelPoints = AverageFuelPoints;
            }
            // to ensure "AverageFuelPointsAuto" is required (not null)
            if (AverageFuelPointsAuto == null)
            {
                throw new InvalidDataException("AverageFuelPointsAuto is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageFuelPointsAuto = AverageFuelPointsAuto;
            }
            // to ensure "AverageFuelPointsTeleop" is required (not null)
            if (AverageFuelPointsTeleop == null)
            {
                throw new InvalidDataException("AverageFuelPointsTeleop is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageFuelPointsTeleop = AverageFuelPointsTeleop;
            }
            // to ensure "AverageHighGoals" is required (not null)
            if (AverageHighGoals == null)
            {
                throw new InvalidDataException("AverageHighGoals is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageHighGoals = AverageHighGoals;
            }
            // to ensure "AverageHighGoalsAuto" is required (not null)
            if (AverageHighGoalsAuto == null)
            {
                throw new InvalidDataException("AverageHighGoalsAuto is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageHighGoalsAuto = AverageHighGoalsAuto;
            }
            // to ensure "AverageHighGoalsTeleop" is required (not null)
            if (AverageHighGoalsTeleop == null)
            {
                throw new InvalidDataException("AverageHighGoalsTeleop is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageHighGoalsTeleop = AverageHighGoalsTeleop;
            }
            // to ensure "AverageLowGoals" is required (not null)
            if (AverageLowGoals == null)
            {
                throw new InvalidDataException("AverageLowGoals is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageLowGoals = AverageLowGoals;
            }
            // to ensure "AverageLowGoalsAuto" is required (not null)
            if (AverageLowGoalsAuto == null)
            {
                throw new InvalidDataException("AverageLowGoalsAuto is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageLowGoalsAuto = AverageLowGoalsAuto;
            }
            // to ensure "AverageLowGoalsTeleop" is required (not null)
            if (AverageLowGoalsTeleop == null)
            {
                throw new InvalidDataException("AverageLowGoalsTeleop is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageLowGoalsTeleop = AverageLowGoalsTeleop;
            }
            // to ensure "AverageMobilityPointsAuto" is required (not null)
            if (AverageMobilityPointsAuto == null)
            {
                throw new InvalidDataException("AverageMobilityPointsAuto is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageMobilityPointsAuto = AverageMobilityPointsAuto;
            }
            // to ensure "AveragePointsAuto" is required (not null)
            if (AveragePointsAuto == null)
            {
                throw new InvalidDataException("AveragePointsAuto is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AveragePointsAuto = AveragePointsAuto;
            }
            // to ensure "AveragePointsTeleop" is required (not null)
            if (AveragePointsTeleop == null)
            {
                throw new InvalidDataException("AveragePointsTeleop is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AveragePointsTeleop = AveragePointsTeleop;
            }
            // to ensure "AverageRotorPoints" is required (not null)
            if (AverageRotorPoints == null)
            {
                throw new InvalidDataException("AverageRotorPoints is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageRotorPoints = AverageRotorPoints;
            }
            // to ensure "AverageRotorPointsAuto" is required (not null)
            if (AverageRotorPointsAuto == null)
            {
                throw new InvalidDataException("AverageRotorPointsAuto is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageRotorPointsAuto = AverageRotorPointsAuto;
            }
            // to ensure "AverageRotorPointsTeleop" is required (not null)
            if (AverageRotorPointsTeleop == null)
            {
                throw new InvalidDataException("AverageRotorPointsTeleop is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageRotorPointsTeleop = AverageRotorPointsTeleop;
            }
            // to ensure "AverageScore" is required (not null)
            if (AverageScore == null)
            {
                throw new InvalidDataException("AverageScore is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageScore = AverageScore;
            }
            // to ensure "AverageTakeoffPointsTeleop" is required (not null)
            if (AverageTakeoffPointsTeleop == null)
            {
                throw new InvalidDataException("AverageTakeoffPointsTeleop is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageTakeoffPointsTeleop = AverageTakeoffPointsTeleop;
            }
            // to ensure "AverageWinMargin" is required (not null)
            if (AverageWinMargin == null)
            {
                throw new InvalidDataException("AverageWinMargin is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageWinMargin = AverageWinMargin;
            }
            // to ensure "AverageWinScore" is required (not null)
            if (AverageWinScore == null)
            {
                throw new InvalidDataException("AverageWinScore is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.AverageWinScore = AverageWinScore;
            }
            // to ensure "HighKpa" is required (not null)
            if (HighKpa == null)
            {
                throw new InvalidDataException("HighKpa is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.HighKpa = HighKpa;
            }
            // to ensure "HighScore" is required (not null)
            if (HighScore == null)
            {
                throw new InvalidDataException("HighScore is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.HighScore = HighScore;
            }
            // to ensure "KpaAchieved" is required (not null)
            if (KpaAchieved == null)
            {
                throw new InvalidDataException("KpaAchieved is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.KpaAchieved = KpaAchieved;
            }
            // to ensure "MobilityCounts" is required (not null)
            if (MobilityCounts == null)
            {
                throw new InvalidDataException("MobilityCounts is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.MobilityCounts = MobilityCounts;
            }
            // to ensure "Rotor1Engaged" is required (not null)
            if (Rotor1Engaged == null)
            {
                throw new InvalidDataException("Rotor1Engaged is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.Rotor1Engaged = Rotor1Engaged;
            }
            // to ensure "Rotor1EngagedAuto" is required (not null)
            if (Rotor1EngagedAuto == null)
            {
                throw new InvalidDataException("Rotor1EngagedAuto is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.Rotor1EngagedAuto = Rotor1EngagedAuto;
            }
            // to ensure "Rotor2Engaged" is required (not null)
            if (Rotor2Engaged == null)
            {
                throw new InvalidDataException("Rotor2Engaged is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.Rotor2Engaged = Rotor2Engaged;
            }
            // to ensure "Rotor2EngagedAuto" is required (not null)
            if (Rotor2EngagedAuto == null)
            {
                throw new InvalidDataException("Rotor2EngagedAuto is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.Rotor2EngagedAuto = Rotor2EngagedAuto;
            }
            // to ensure "Rotor3Engaged" is required (not null)
            if (Rotor3Engaged == null)
            {
                throw new InvalidDataException("Rotor3Engaged is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.Rotor3Engaged = Rotor3Engaged;
            }
            // to ensure "Rotor4Engaged" is required (not null)
            if (Rotor4Engaged == null)
            {
                throw new InvalidDataException("Rotor4Engaged is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.Rotor4Engaged = Rotor4Engaged;
            }
            // to ensure "TakeoffCounts" is required (not null)
            if (TakeoffCounts == null)
            {
                throw new InvalidDataException("TakeoffCounts is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.TakeoffCounts = TakeoffCounts;
            }
            // to ensure "UnicornMatches" is required (not null)
            if (UnicornMatches == null)
            {
                throw new InvalidDataException("UnicornMatches is a required property for EventInsights2017 and cannot be null");
            }
            else
            {
                this.UnicornMatches = UnicornMatches;
            }
        }
        
        /// <summary>
        /// Average foul score.
        /// </summary>
        /// <value>Average foul score.</value>
        [DataMember(Name="average_foul_score", EmitDefaultValue=false)]
        public float? AverageFoulScore { get; set; }

        /// <summary>
        /// Average fuel points scored.
        /// </summary>
        /// <value>Average fuel points scored.</value>
        [DataMember(Name="average_fuel_points", EmitDefaultValue=false)]
        public float? AverageFuelPoints { get; set; }

        /// <summary>
        /// Average fuel points scored during auto.
        /// </summary>
        /// <value>Average fuel points scored during auto.</value>
        [DataMember(Name="average_fuel_points_auto", EmitDefaultValue=false)]
        public float? AverageFuelPointsAuto { get; set; }

        /// <summary>
        /// Average fuel points scored during teleop.
        /// </summary>
        /// <value>Average fuel points scored during teleop.</value>
        [DataMember(Name="average_fuel_points_teleop", EmitDefaultValue=false)]
        public float? AverageFuelPointsTeleop { get; set; }

        /// <summary>
        /// Average points scored in the high goal.
        /// </summary>
        /// <value>Average points scored in the high goal.</value>
        [DataMember(Name="average_high_goals", EmitDefaultValue=false)]
        public float? AverageHighGoals { get; set; }

        /// <summary>
        /// Average points scored in the high goal during auto.
        /// </summary>
        /// <value>Average points scored in the high goal during auto.</value>
        [DataMember(Name="average_high_goals_auto", EmitDefaultValue=false)]
        public float? AverageHighGoalsAuto { get; set; }

        /// <summary>
        /// Average points scored in the high goal during teleop.
        /// </summary>
        /// <value>Average points scored in the high goal during teleop.</value>
        [DataMember(Name="average_high_goals_teleop", EmitDefaultValue=false)]
        public float? AverageHighGoalsTeleop { get; set; }

        /// <summary>
        /// Average points scored in the low goal.
        /// </summary>
        /// <value>Average points scored in the low goal.</value>
        [DataMember(Name="average_low_goals", EmitDefaultValue=false)]
        public float? AverageLowGoals { get; set; }

        /// <summary>
        /// Average points scored in the low goal during auto.
        /// </summary>
        /// <value>Average points scored in the low goal during auto.</value>
        [DataMember(Name="average_low_goals_auto", EmitDefaultValue=false)]
        public float? AverageLowGoalsAuto { get; set; }

        /// <summary>
        /// Average points scored in the low goal during teleop.
        /// </summary>
        /// <value>Average points scored in the low goal during teleop.</value>
        [DataMember(Name="average_low_goals_teleop", EmitDefaultValue=false)]
        public float? AverageLowGoalsTeleop { get; set; }

        /// <summary>
        /// Average mobility points scored during auto.
        /// </summary>
        /// <value>Average mobility points scored during auto.</value>
        [DataMember(Name="average_mobility_points_auto", EmitDefaultValue=false)]
        public float? AverageMobilityPointsAuto { get; set; }

        /// <summary>
        /// Average points scored during auto.
        /// </summary>
        /// <value>Average points scored during auto.</value>
        [DataMember(Name="average_points_auto", EmitDefaultValue=false)]
        public float? AveragePointsAuto { get; set; }

        /// <summary>
        /// Average points scored during teleop.
        /// </summary>
        /// <value>Average points scored during teleop.</value>
        [DataMember(Name="average_points_teleop", EmitDefaultValue=false)]
        public float? AveragePointsTeleop { get; set; }

        /// <summary>
        /// Average rotor points scored.
        /// </summary>
        /// <value>Average rotor points scored.</value>
        [DataMember(Name="average_rotor_points", EmitDefaultValue=false)]
        public float? AverageRotorPoints { get; set; }

        /// <summary>
        /// Average rotor points scored during auto.
        /// </summary>
        /// <value>Average rotor points scored during auto.</value>
        [DataMember(Name="average_rotor_points_auto", EmitDefaultValue=false)]
        public float? AverageRotorPointsAuto { get; set; }

        /// <summary>
        /// Average rotor points scored during teleop.
        /// </summary>
        /// <value>Average rotor points scored during teleop.</value>
        [DataMember(Name="average_rotor_points_teleop", EmitDefaultValue=false)]
        public float? AverageRotorPointsTeleop { get; set; }

        /// <summary>
        /// Average score.
        /// </summary>
        /// <value>Average score.</value>
        [DataMember(Name="average_score", EmitDefaultValue=false)]
        public float? AverageScore { get; set; }

        /// <summary>
        /// Average takeoff points scored during teleop.
        /// </summary>
        /// <value>Average takeoff points scored during teleop.</value>
        [DataMember(Name="average_takeoff_points_teleop", EmitDefaultValue=false)]
        public float? AverageTakeoffPointsTeleop { get; set; }

        /// <summary>
        /// Average margin of victory.
        /// </summary>
        /// <value>Average margin of victory.</value>
        [DataMember(Name="average_win_margin", EmitDefaultValue=false)]
        public float? AverageWinMargin { get; set; }

        /// <summary>
        /// Average winning score.
        /// </summary>
        /// <value>Average winning score.</value>
        [DataMember(Name="average_win_score", EmitDefaultValue=false)]
        public float? AverageWinScore { get; set; }

        /// <summary>
        /// An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
        /// </summary>
        /// <value>An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match</value>
        [DataMember(Name="high_kpa", EmitDefaultValue=false)]
        public List<string> HighKpa { get; set; }

        /// <summary>
        /// An array with three values, high score, match key from the match with the high score, and the name of the match
        /// </summary>
        /// <value>An array with three values, high score, match key from the match with the high score, and the name of the match</value>
        [DataMember(Name="high_score", EmitDefaultValue=false)]
        public List<string> HighScore { get; set; }

        /// <summary>
        /// An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.</value>
        [DataMember(Name="kpa_achieved", EmitDefaultValue=false)]
        public List<float?> KpaAchieved { get; set; }

        /// <summary>
        /// An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.</value>
        [DataMember(Name="mobility_counts", EmitDefaultValue=false)]
        public List<float?> MobilityCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.</value>
        [DataMember(Name="rotor_1_engaged", EmitDefaultValue=false)]
        public List<float?> Rotor1Engaged { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.</value>
        [DataMember(Name="rotor_1_engaged_auto", EmitDefaultValue=false)]
        public List<float?> Rotor1EngagedAuto { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.</value>
        [DataMember(Name="rotor_2_engaged", EmitDefaultValue=false)]
        public List<float?> Rotor2Engaged { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.</value>
        [DataMember(Name="rotor_2_engaged_auto", EmitDefaultValue=false)]
        public List<float?> Rotor2EngagedAuto { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.</value>
        [DataMember(Name="rotor_3_engaged", EmitDefaultValue=false)]
        public List<float?> Rotor3Engaged { get; set; }

        /// <summary>
        /// An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.</value>
        [DataMember(Name="rotor_4_engaged", EmitDefaultValue=false)]
        public List<float?> Rotor4Engaged { get; set; }

        /// <summary>
        /// An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.</value>
        [DataMember(Name="takeoff_counts", EmitDefaultValue=false)]
        public List<float?> TakeoffCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.</value>
        [DataMember(Name="unicorn_matches", EmitDefaultValue=false)]
        public List<float?> UnicornMatches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventInsights2017 {\n");
            sb.Append("  AverageFoulScore: ").Append(AverageFoulScore).Append("\n");
            sb.Append("  AverageFuelPoints: ").Append(AverageFuelPoints).Append("\n");
            sb.Append("  AverageFuelPointsAuto: ").Append(AverageFuelPointsAuto).Append("\n");
            sb.Append("  AverageFuelPointsTeleop: ").Append(AverageFuelPointsTeleop).Append("\n");
            sb.Append("  AverageHighGoals: ").Append(AverageHighGoals).Append("\n");
            sb.Append("  AverageHighGoalsAuto: ").Append(AverageHighGoalsAuto).Append("\n");
            sb.Append("  AverageHighGoalsTeleop: ").Append(AverageHighGoalsTeleop).Append("\n");
            sb.Append("  AverageLowGoals: ").Append(AverageLowGoals).Append("\n");
            sb.Append("  AverageLowGoalsAuto: ").Append(AverageLowGoalsAuto).Append("\n");
            sb.Append("  AverageLowGoalsTeleop: ").Append(AverageLowGoalsTeleop).Append("\n");
            sb.Append("  AverageMobilityPointsAuto: ").Append(AverageMobilityPointsAuto).Append("\n");
            sb.Append("  AveragePointsAuto: ").Append(AveragePointsAuto).Append("\n");
            sb.Append("  AveragePointsTeleop: ").Append(AveragePointsTeleop).Append("\n");
            sb.Append("  AverageRotorPoints: ").Append(AverageRotorPoints).Append("\n");
            sb.Append("  AverageRotorPointsAuto: ").Append(AverageRotorPointsAuto).Append("\n");
            sb.Append("  AverageRotorPointsTeleop: ").Append(AverageRotorPointsTeleop).Append("\n");
            sb.Append("  AverageScore: ").Append(AverageScore).Append("\n");
            sb.Append("  AverageTakeoffPointsTeleop: ").Append(AverageTakeoffPointsTeleop).Append("\n");
            sb.Append("  AverageWinMargin: ").Append(AverageWinMargin).Append("\n");
            sb.Append("  AverageWinScore: ").Append(AverageWinScore).Append("\n");
            sb.Append("  HighKpa: ").Append(HighKpa).Append("\n");
            sb.Append("  HighScore: ").Append(HighScore).Append("\n");
            sb.Append("  KpaAchieved: ").Append(KpaAchieved).Append("\n");
            sb.Append("  MobilityCounts: ").Append(MobilityCounts).Append("\n");
            sb.Append("  Rotor1Engaged: ").Append(Rotor1Engaged).Append("\n");
            sb.Append("  Rotor1EngagedAuto: ").Append(Rotor1EngagedAuto).Append("\n");
            sb.Append("  Rotor2Engaged: ").Append(Rotor2Engaged).Append("\n");
            sb.Append("  Rotor2EngagedAuto: ").Append(Rotor2EngagedAuto).Append("\n");
            sb.Append("  Rotor3Engaged: ").Append(Rotor3Engaged).Append("\n");
            sb.Append("  Rotor4Engaged: ").Append(Rotor4Engaged).Append("\n");
            sb.Append("  TakeoffCounts: ").Append(TakeoffCounts).Append("\n");
            sb.Append("  UnicornMatches: ").Append(UnicornMatches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventInsights2017);
        }

        /// <summary>
        /// Returns true if EventInsights2017 instances are equal
        /// </summary>
        /// <param name="input">Instance of EventInsights2017 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventInsights2017 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AverageFoulScore == input.AverageFoulScore ||
                    (this.AverageFoulScore != null &&
                    this.AverageFoulScore.Equals(input.AverageFoulScore))
                ) && 
                (
                    this.AverageFuelPoints == input.AverageFuelPoints ||
                    (this.AverageFuelPoints != null &&
                    this.AverageFuelPoints.Equals(input.AverageFuelPoints))
                ) && 
                (
                    this.AverageFuelPointsAuto == input.AverageFuelPointsAuto ||
                    (this.AverageFuelPointsAuto != null &&
                    this.AverageFuelPointsAuto.Equals(input.AverageFuelPointsAuto))
                ) && 
                (
                    this.AverageFuelPointsTeleop == input.AverageFuelPointsTeleop ||
                    (this.AverageFuelPointsTeleop != null &&
                    this.AverageFuelPointsTeleop.Equals(input.AverageFuelPointsTeleop))
                ) && 
                (
                    this.AverageHighGoals == input.AverageHighGoals ||
                    (this.AverageHighGoals != null &&
                    this.AverageHighGoals.Equals(input.AverageHighGoals))
                ) && 
                (
                    this.AverageHighGoalsAuto == input.AverageHighGoalsAuto ||
                    (this.AverageHighGoalsAuto != null &&
                    this.AverageHighGoalsAuto.Equals(input.AverageHighGoalsAuto))
                ) && 
                (
                    this.AverageHighGoalsTeleop == input.AverageHighGoalsTeleop ||
                    (this.AverageHighGoalsTeleop != null &&
                    this.AverageHighGoalsTeleop.Equals(input.AverageHighGoalsTeleop))
                ) && 
                (
                    this.AverageLowGoals == input.AverageLowGoals ||
                    (this.AverageLowGoals != null &&
                    this.AverageLowGoals.Equals(input.AverageLowGoals))
                ) && 
                (
                    this.AverageLowGoalsAuto == input.AverageLowGoalsAuto ||
                    (this.AverageLowGoalsAuto != null &&
                    this.AverageLowGoalsAuto.Equals(input.AverageLowGoalsAuto))
                ) && 
                (
                    this.AverageLowGoalsTeleop == input.AverageLowGoalsTeleop ||
                    (this.AverageLowGoalsTeleop != null &&
                    this.AverageLowGoalsTeleop.Equals(input.AverageLowGoalsTeleop))
                ) && 
                (
                    this.AverageMobilityPointsAuto == input.AverageMobilityPointsAuto ||
                    (this.AverageMobilityPointsAuto != null &&
                    this.AverageMobilityPointsAuto.Equals(input.AverageMobilityPointsAuto))
                ) && 
                (
                    this.AveragePointsAuto == input.AveragePointsAuto ||
                    (this.AveragePointsAuto != null &&
                    this.AveragePointsAuto.Equals(input.AveragePointsAuto))
                ) && 
                (
                    this.AveragePointsTeleop == input.AveragePointsTeleop ||
                    (this.AveragePointsTeleop != null &&
                    this.AveragePointsTeleop.Equals(input.AveragePointsTeleop))
                ) && 
                (
                    this.AverageRotorPoints == input.AverageRotorPoints ||
                    (this.AverageRotorPoints != null &&
                    this.AverageRotorPoints.Equals(input.AverageRotorPoints))
                ) && 
                (
                    this.AverageRotorPointsAuto == input.AverageRotorPointsAuto ||
                    (this.AverageRotorPointsAuto != null &&
                    this.AverageRotorPointsAuto.Equals(input.AverageRotorPointsAuto))
                ) && 
                (
                    this.AverageRotorPointsTeleop == input.AverageRotorPointsTeleop ||
                    (this.AverageRotorPointsTeleop != null &&
                    this.AverageRotorPointsTeleop.Equals(input.AverageRotorPointsTeleop))
                ) && 
                (
                    this.AverageScore == input.AverageScore ||
                    (this.AverageScore != null &&
                    this.AverageScore.Equals(input.AverageScore))
                ) && 
                (
                    this.AverageTakeoffPointsTeleop == input.AverageTakeoffPointsTeleop ||
                    (this.AverageTakeoffPointsTeleop != null &&
                    this.AverageTakeoffPointsTeleop.Equals(input.AverageTakeoffPointsTeleop))
                ) && 
                (
                    this.AverageWinMargin == input.AverageWinMargin ||
                    (this.AverageWinMargin != null &&
                    this.AverageWinMargin.Equals(input.AverageWinMargin))
                ) && 
                (
                    this.AverageWinScore == input.AverageWinScore ||
                    (this.AverageWinScore != null &&
                    this.AverageWinScore.Equals(input.AverageWinScore))
                ) && 
                (
                    this.HighKpa == input.HighKpa ||
                    this.HighKpa != null &&
                    this.HighKpa.SequenceEqual(input.HighKpa)
                ) && 
                (
                    this.HighScore == input.HighScore ||
                    this.HighScore != null &&
                    this.HighScore.SequenceEqual(input.HighScore)
                ) && 
                (
                    this.KpaAchieved == input.KpaAchieved ||
                    this.KpaAchieved != null &&
                    this.KpaAchieved.SequenceEqual(input.KpaAchieved)
                ) && 
                (
                    this.MobilityCounts == input.MobilityCounts ||
                    this.MobilityCounts != null &&
                    this.MobilityCounts.SequenceEqual(input.MobilityCounts)
                ) && 
                (
                    this.Rotor1Engaged == input.Rotor1Engaged ||
                    this.Rotor1Engaged != null &&
                    this.Rotor1Engaged.SequenceEqual(input.Rotor1Engaged)
                ) && 
                (
                    this.Rotor1EngagedAuto == input.Rotor1EngagedAuto ||
                    this.Rotor1EngagedAuto != null &&
                    this.Rotor1EngagedAuto.SequenceEqual(input.Rotor1EngagedAuto)
                ) && 
                (
                    this.Rotor2Engaged == input.Rotor2Engaged ||
                    this.Rotor2Engaged != null &&
                    this.Rotor2Engaged.SequenceEqual(input.Rotor2Engaged)
                ) && 
                (
                    this.Rotor2EngagedAuto == input.Rotor2EngagedAuto ||
                    this.Rotor2EngagedAuto != null &&
                    this.Rotor2EngagedAuto.SequenceEqual(input.Rotor2EngagedAuto)
                ) && 
                (
                    this.Rotor3Engaged == input.Rotor3Engaged ||
                    this.Rotor3Engaged != null &&
                    this.Rotor3Engaged.SequenceEqual(input.Rotor3Engaged)
                ) && 
                (
                    this.Rotor4Engaged == input.Rotor4Engaged ||
                    this.Rotor4Engaged != null &&
                    this.Rotor4Engaged.SequenceEqual(input.Rotor4Engaged)
                ) && 
                (
                    this.TakeoffCounts == input.TakeoffCounts ||
                    this.TakeoffCounts != null &&
                    this.TakeoffCounts.SequenceEqual(input.TakeoffCounts)
                ) && 
                (
                    this.UnicornMatches == input.UnicornMatches ||
                    this.UnicornMatches != null &&
                    this.UnicornMatches.SequenceEqual(input.UnicornMatches)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AverageFoulScore != null)
                    hashCode = hashCode * 59 + this.AverageFoulScore.GetHashCode();
                if (this.AverageFuelPoints != null)
                    hashCode = hashCode * 59 + this.AverageFuelPoints.GetHashCode();
                if (this.AverageFuelPointsAuto != null)
                    hashCode = hashCode * 59 + this.AverageFuelPointsAuto.GetHashCode();
                if (this.AverageFuelPointsTeleop != null)
                    hashCode = hashCode * 59 + this.AverageFuelPointsTeleop.GetHashCode();
                if (this.AverageHighGoals != null)
                    hashCode = hashCode * 59 + this.AverageHighGoals.GetHashCode();
                if (this.AverageHighGoalsAuto != null)
                    hashCode = hashCode * 59 + this.AverageHighGoalsAuto.GetHashCode();
                if (this.AverageHighGoalsTeleop != null)
                    hashCode = hashCode * 59 + this.AverageHighGoalsTeleop.GetHashCode();
                if (this.AverageLowGoals != null)
                    hashCode = hashCode * 59 + this.AverageLowGoals.GetHashCode();
                if (this.AverageLowGoalsAuto != null)
                    hashCode = hashCode * 59 + this.AverageLowGoalsAuto.GetHashCode();
                if (this.AverageLowGoalsTeleop != null)
                    hashCode = hashCode * 59 + this.AverageLowGoalsTeleop.GetHashCode();
                if (this.AverageMobilityPointsAuto != null)
                    hashCode = hashCode * 59 + this.AverageMobilityPointsAuto.GetHashCode();
                if (this.AveragePointsAuto != null)
                    hashCode = hashCode * 59 + this.AveragePointsAuto.GetHashCode();
                if (this.AveragePointsTeleop != null)
                    hashCode = hashCode * 59 + this.AveragePointsTeleop.GetHashCode();
                if (this.AverageRotorPoints != null)
                    hashCode = hashCode * 59 + this.AverageRotorPoints.GetHashCode();
                if (this.AverageRotorPointsAuto != null)
                    hashCode = hashCode * 59 + this.AverageRotorPointsAuto.GetHashCode();
                if (this.AverageRotorPointsTeleop != null)
                    hashCode = hashCode * 59 + this.AverageRotorPointsTeleop.GetHashCode();
                if (this.AverageScore != null)
                    hashCode = hashCode * 59 + this.AverageScore.GetHashCode();
                if (this.AverageTakeoffPointsTeleop != null)
                    hashCode = hashCode * 59 + this.AverageTakeoffPointsTeleop.GetHashCode();
                if (this.AverageWinMargin != null)
                    hashCode = hashCode * 59 + this.AverageWinMargin.GetHashCode();
                if (this.AverageWinScore != null)
                    hashCode = hashCode * 59 + this.AverageWinScore.GetHashCode();
                if (this.HighKpa != null)
                    hashCode = hashCode * 59 + this.HighKpa.GetHashCode();
                if (this.HighScore != null)
                    hashCode = hashCode * 59 + this.HighScore.GetHashCode();
                if (this.KpaAchieved != null)
                    hashCode = hashCode * 59 + this.KpaAchieved.GetHashCode();
                if (this.MobilityCounts != null)
                    hashCode = hashCode * 59 + this.MobilityCounts.GetHashCode();
                if (this.Rotor1Engaged != null)
                    hashCode = hashCode * 59 + this.Rotor1Engaged.GetHashCode();
                if (this.Rotor1EngagedAuto != null)
                    hashCode = hashCode * 59 + this.Rotor1EngagedAuto.GetHashCode();
                if (this.Rotor2Engaged != null)
                    hashCode = hashCode * 59 + this.Rotor2Engaged.GetHashCode();
                if (this.Rotor2EngagedAuto != null)
                    hashCode = hashCode * 59 + this.Rotor2EngagedAuto.GetHashCode();
                if (this.Rotor3Engaged != null)
                    hashCode = hashCode * 59 + this.Rotor3Engaged.GetHashCode();
                if (this.Rotor4Engaged != null)
                    hashCode = hashCode * 59 + this.Rotor4Engaged.GetHashCode();
                if (this.TakeoffCounts != null)
                    hashCode = hashCode * 59 + this.TakeoffCounts.GetHashCode();
                if (this.UnicornMatches != null)
                    hashCode = hashCode * 59 + this.UnicornMatches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

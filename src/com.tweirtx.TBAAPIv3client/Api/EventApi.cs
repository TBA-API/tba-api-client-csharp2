/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.04.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.tweirtx.TBAAPIv3client.Client;
using com.tweirtx.TBAAPIv3client.Model;

namespace com.tweirtx.TBAAPIv3client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetDistrictEvents ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetDistrictEventsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetDistrictEventsKeys ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetDistrictEventsKeysWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetDistrictEventsSimple (string districtKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetDistrictEventsSimpleWithHttpInfo (string districtKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Event</returns>
        Event GetEvent ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Event</returns>
        ApiResponse<Event> GetEventWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Elimination Alliances for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EliminationAlliance&gt;</returns>
        List<EliminationAlliance> GetEventAlliances ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Elimination Alliances for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EliminationAlliance&gt;</returns>
        ApiResponse<List<EliminationAlliance>> GetEventAlliancesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards from the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Award&gt;</returns>
        List<Award> GetEventAwards ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards from the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        ApiResponse<List<Award>> GetEventAwardsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventDistrictPoints</returns>
        EventDistrictPoints GetEventDistrictPoints ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventDistrictPoints</returns>
        ApiResponse<EventDistrictPoints> GetEventDistrictPointsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event-specific insights for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventInsights</returns>
        EventInsights GetEventInsights ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event-specific insights for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventInsights</returns>
        ApiResponse<EventInsights> GetEventInsightsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventMatchTimeseries ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventMatchTimeseriesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetEventMatches ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetEventMatchesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventMatchesKeys ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventMatchesKeysWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MatchSimple&gt;</returns>
        List<MatchSimple> GetEventMatchesSimple ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
        ApiResponse<List<MatchSimple>> GetEventMatchesSimpleWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventOPRs</returns>
        EventOPRs GetEventOPRs ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventOPRs</returns>
        ApiResponse<EventOPRs> GetEventOPRsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object GetEventPredictions ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetEventPredictionsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventRanking</returns>
        EventRanking GetEventRankings ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventRanking</returns>
        ApiResponse<EventRanking> GetEventRankingsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventSimple</returns>
        EventSimple GetEventSimple ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventSimple</returns>
        ApiResponse<EventSimple> GetEventSimpleWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetEventTeams ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetEventTeamsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventTeamsKeys ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventTeamsKeysWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        List<TeamSimple> GetEventTeamsSimple ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        ApiResponse<List<TeamSimple>> GetEventTeamsSimpleWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        Dictionary<string, TeamEventStatus> GetEventTeamsStatuses ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        ApiResponse<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetEventsByYear ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetEventsByYearWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetEventsByYearKeys ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetEventsByYearKeysWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetEventsByYearSimple ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetEventsByYearSimpleWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Award&gt;</returns>
        List<Award> GetTeamEventAwards ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        ApiResponse<List<Award>> GetTeamEventAwardsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetTeamEventMatches ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetTeamEventMatchesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamEventMatchesKeys ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamEventMatchesKeysWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetTeamEventMatchesSimple ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetTeamEventMatchesSimpleWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamEventStatus</returns>
        TeamEventStatus GetTeamEventStatus ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamEventStatus</returns>
        ApiResponse<TeamEventStatus> GetTeamEventStatusWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetTeamEvents ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetTeamEventsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> GetTeamEventsByYear ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> GetTeamEventsByYearWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamEventsByYearKeys ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamEventsByYearKeysWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetTeamEventsByYearSimple ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetTeamEventsByYearSimpleWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTeamEventsKeys ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTeamEventsKeysWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventSimple&gt;</returns>
        List<EventSimple> GetTeamEventsSimple ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        ApiResponse<List<EventSimple>> GetTeamEventsSimpleWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        Dictionary<string, TeamEventStatus> GetTeamEventsStatusesByYear ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        ApiResponse<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetDistrictEventsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetDistrictEventsKeysAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys for events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetDistrictEventsSimpleAsync (string districtKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given district.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfo (string districtKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Event</returns>
        System.Threading.Tasks.Task<Event> GetEventAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Event)</returns>
        System.Threading.Tasks.Task<ApiResponse<Event>> GetEventAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Elimination Alliances for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EliminationAlliance&gt;</returns>
        System.Threading.Tasks.Task<List<EliminationAlliance>> GetEventAlliancesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of Elimination Alliances for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EliminationAlliance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EliminationAlliance>>> GetEventAlliancesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards from the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Award&gt;</returns>
        System.Threading.Tasks.Task<List<Award>> GetEventAwardsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards from the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Award>>> GetEventAwardsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventDistrictPoints</returns>
        System.Threading.Tasks.Task<EventDistrictPoints> GetEventDistrictPointsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventDistrictPoints)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDistrictPoints>> GetEventDistrictPointsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event-specific insights for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventInsights</returns>
        System.Threading.Tasks.Task<EventInsights> GetEventInsightsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event-specific insights for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventInsights)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventInsights>> GetEventInsightsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventMatchTimeseriesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchTimeseriesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetEventMatchesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetEventMatchesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventMatchesKeysAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchesKeysAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MatchSimple&gt;</returns>
        System.Threading.Tasks.Task<List<MatchSimple>> GetEventMatchesSimpleAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MatchSimple>>> GetEventMatchesSimpleAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventOPRs</returns>
        System.Threading.Tasks.Task<EventOPRs> GetEventOPRsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventOPRs)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventOPRs>> GetEventOPRsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetEventPredictionsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEventPredictionsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventRanking</returns>
        System.Threading.Tasks.Task<EventRanking> GetEventRankingsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of team rankings for the Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventRanking)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventRanking>> GetEventRankingsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventSimple</returns>
        System.Threading.Tasks.Task<EventSimple> GetEventSimpleAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form Event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventSimple)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventSimple>> GetEventSimpleAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetEventTeamsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventTeamsKeysAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSimple>> GetEventTeamsSimpleAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for teams competing at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetEventsByYearAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetEventsByYearKeysAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of event keys in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetEventsByYearSimpleAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Award&gt;</returns>
        System.Threading.Tasks.Task<List<Award>> GetTeamEventAwardsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of awards the given team won at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Award>>> GetTeamEventAwardsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamEventMatchesKeysAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of match keys for matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesSimpleAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of matches for the given team and event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamEventStatus</returns>
        System.Threading.Tasks.Task<TeamEventStatus> GetTeamEventStatusAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the competition rank and status of the team at the given event.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamEventStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamEventStatus>> GetTeamEventStatusAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetTeamEventsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetTeamEventsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> GetTeamEventsByYearAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetTeamEventsByYearAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamEventsByYearKeysAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventsByYearKeysAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsByYearSimpleAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetTeamEventsByYearSimpleAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTeamEventsKeysAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of the event keys for all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventsKeysAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsSimpleAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a short-form list of all events this team has competed at.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetTeamEventsSimpleAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </remarks>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventApi : IEventApi
    {
        private com.tweirtx.TBAAPIv3client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventApi(String basePath)
        {
            this.Configuration = new com.tweirtx.TBAAPIv3client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = com.tweirtx.TBAAPIv3client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class
        /// </summary>
        /// <returns></returns>
        public EventApi()
        {
            this.Configuration = com.tweirtx.TBAAPIv3client.Client.Configuration.Default;

            ExceptionFactory = com.tweirtx.TBAAPIv3client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventApi(com.tweirtx.TBAAPIv3client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = com.tweirtx.TBAAPIv3client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.tweirtx.TBAAPIv3client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.tweirtx.TBAAPIv3client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.tweirtx.TBAAPIv3client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetDistrictEvents ()
        {
             ApiResponse<List<Event>> localVarResponse = GetDistrictEventsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public ApiResponse< List<Event> > GetDistrictEventsWithHttpInfo ()
        {

            var localVarPath = "/district/{district_key}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Event>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Event>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Event>)));
        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetDistrictEventsAsync ()
        {
             ApiResponse<List<Event>> localVarResponse = await GetDistrictEventsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetDistrictEventsAsyncWithHttpInfo ()
        {

            var localVarPath = "/district/{district_key}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Event>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Event>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Event>)));
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetDistrictEventsKeys ()
        {
             ApiResponse<List<string>> localVarResponse = GetDistrictEventsKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetDistrictEventsKeysWithHttpInfo ()
        {

            var localVarPath = "/district/{district_key}/events/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetDistrictEventsKeysAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetDistrictEventsKeysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of event keys for events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDistrictEventsKeysAsyncWithHttpInfo ()
        {

            var localVarPath = "/district/{district_key}/events/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEventsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetDistrictEventsSimple (string districtKey)
        {
             ApiResponse<List<EventSimple>> localVarResponse = GetDistrictEventsSimpleWithHttpInfo(districtKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public ApiResponse< List<EventSimple> > GetDistrictEventsSimpleWithHttpInfo (string districtKey)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsSimple");

            var localVarPath = "/district/{district_key}/events/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", this.Configuration.ApiClient.ParameterToString(districtKey)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetDistrictEventsSimpleAsync (string districtKey)
        {
             ApiResponse<List<EventSimple>> localVarResponse = await GetDistrictEventsSimpleAsyncWithHttpInfo(districtKey);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events in the given district.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="districtKey">TBA District Key, eg &#x60;2016fim&#x60;</param>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetDistrictEventsSimpleAsyncWithHttpInfo (string districtKey)
        {
            // verify the required parameter 'districtKey' is set
            if (districtKey == null)
                throw new ApiException(400, "Missing required parameter 'districtKey' when calling EventApi->GetDistrictEventsSimple");

            var localVarPath = "/district/{district_key}/events/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (districtKey != null) localVarPathParams.Add("district_key", this.Configuration.ApiClient.ParameterToString(districtKey)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictEventsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets an Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Event</returns>
        public Event GetEvent ()
        {
             ApiResponse<Event> localVarResponse = GetEventWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Event</returns>
        public ApiResponse< Event > GetEventWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Event>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Event) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Event)));
        }

        /// <summary>
        ///  Gets an Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Event</returns>
        public async System.Threading.Tasks.Task<Event> GetEventAsync ()
        {
             ApiResponse<Event> localVarResponse = await GetEventAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets an Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Event)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Event>> GetEventAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Event>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Event) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Event)));
        }

        /// <summary>
        ///  Gets a list of Elimination Alliances for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EliminationAlliance&gt;</returns>
        public List<EliminationAlliance> GetEventAlliances ()
        {
             ApiResponse<List<EliminationAlliance>> localVarResponse = GetEventAlliancesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of Elimination Alliances for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EliminationAlliance&gt;</returns>
        public ApiResponse< List<EliminationAlliance> > GetEventAlliancesWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/alliances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventAlliances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EliminationAlliance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EliminationAlliance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EliminationAlliance>)));
        }

        /// <summary>
        ///  Gets a list of Elimination Alliances for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EliminationAlliance&gt;</returns>
        public async System.Threading.Tasks.Task<List<EliminationAlliance>> GetEventAlliancesAsync ()
        {
             ApiResponse<List<EliminationAlliance>> localVarResponse = await GetEventAlliancesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of Elimination Alliances for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EliminationAlliance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EliminationAlliance>>> GetEventAlliancesAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/alliances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventAlliances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EliminationAlliance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EliminationAlliance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EliminationAlliance>)));
        }

        /// <summary>
        ///  Gets a list of awards from the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Award&gt;</returns>
        public List<Award> GetEventAwards ()
        {
             ApiResponse<List<Award>> localVarResponse = GetEventAwardsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of awards from the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        public ApiResponse< List<Award> > GetEventAwardsWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/awards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventAwards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Award>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Award>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Award>)));
        }

        /// <summary>
        ///  Gets a list of awards from the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Award&gt;</returns>
        public async System.Threading.Tasks.Task<List<Award>> GetEventAwardsAsync ()
        {
             ApiResponse<List<Award>> localVarResponse = await GetEventAwardsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of awards from the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Award>>> GetEventAwardsAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/awards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventAwards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Award>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Award>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Award>)));
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventDistrictPoints</returns>
        public EventDistrictPoints GetEventDistrictPoints ()
        {
             ApiResponse<EventDistrictPoints> localVarResponse = GetEventDistrictPointsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventDistrictPoints</returns>
        public ApiResponse< EventDistrictPoints > GetEventDistrictPointsWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/district_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventDistrictPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventDistrictPoints>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventDistrictPoints) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventDistrictPoints)));
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventDistrictPoints</returns>
        public async System.Threading.Tasks.Task<EventDistrictPoints> GetEventDistrictPointsAsync ()
        {
             ApiResponse<EventDistrictPoints> localVarResponse = await GetEventDistrictPointsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventDistrictPoints)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventDistrictPoints>> GetEventDistrictPointsAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/district_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventDistrictPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventDistrictPoints>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventDistrictPoints) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventDistrictPoints)));
        }

        /// <summary>
        ///  Gets a set of Event-specific insights for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventInsights</returns>
        public EventInsights GetEventInsights ()
        {
             ApiResponse<EventInsights> localVarResponse = GetEventInsightsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a set of Event-specific insights for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventInsights</returns>
        public ApiResponse< EventInsights > GetEventInsightsWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/insights";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventInsights", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventInsights>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventInsights) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventInsights)));
        }

        /// <summary>
        ///  Gets a set of Event-specific insights for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventInsights</returns>
        public async System.Threading.Tasks.Task<EventInsights> GetEventInsightsAsync ()
        {
             ApiResponse<EventInsights> localVarResponse = await GetEventInsightsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a set of Event-specific insights for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventInsights)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventInsights>> GetEventInsightsAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/insights";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventInsights", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventInsights>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventInsights) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventInsights)));
        }

        /// <summary>
        ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventMatchTimeseries ()
        {
             ApiResponse<List<string>> localVarResponse = GetEventMatchTimeseriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetEventMatchTimeseriesWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/matches/timeseries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventMatchTimeseriesAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetEventMatchTimeseriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchTimeseriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/matches/timeseries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventMatchTimeseries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of matches for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetEventMatches ()
        {
             ApiResponse<List<Match>> localVarResponse = GetEventMatchesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of matches for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public ApiResponse< List<Match> > GetEventMatchesWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventMatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Match>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Match>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Match>)));
        }

        /// <summary>
        ///  Gets a list of matches for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetEventMatchesAsync ()
        {
             ApiResponse<List<Match>> localVarResponse = await GetEventMatchesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of matches for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetEventMatchesAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventMatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Match>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Match>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Match>)));
        }

        /// <summary>
        ///  Gets a list of match keys for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventMatchesKeys ()
        {
             ApiResponse<List<string>> localVarResponse = GetEventMatchesKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of match keys for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetEventMatchesKeysWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/matches/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventMatchesKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of match keys for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventMatchesKeysAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetEventMatchesKeysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of match keys for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventMatchesKeysAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/matches/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventMatchesKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MatchSimple&gt;</returns>
        public List<MatchSimple> GetEventMatchesSimple ()
        {
             ApiResponse<List<MatchSimple>> localVarResponse = GetEventMatchesSimpleWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MatchSimple&gt;</returns>
        public ApiResponse< List<MatchSimple> > GetEventMatchesSimpleWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/matches/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventMatchesSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MatchSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MatchSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MatchSimple>)));
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MatchSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<MatchSimple>> GetEventMatchesSimpleAsync ()
        {
             ApiResponse<List<MatchSimple>> localVarResponse = await GetEventMatchesSimpleAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of matches for the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MatchSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MatchSimple>>> GetEventMatchesSimpleAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/matches/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventMatchesSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MatchSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MatchSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MatchSimple>)));
        }

        /// <summary>
        ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventOPRs</returns>
        public EventOPRs GetEventOPRs ()
        {
             ApiResponse<EventOPRs> localVarResponse = GetEventOPRsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventOPRs</returns>
        public ApiResponse< EventOPRs > GetEventOPRsWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/oprs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventOPRs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventOPRs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventOPRs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventOPRs)));
        }

        /// <summary>
        ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventOPRs</returns>
        public async System.Threading.Tasks.Task<EventOPRs> GetEventOPRsAsync ()
        {
             ApiResponse<EventOPRs> localVarResponse = await GetEventOPRsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventOPRs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventOPRs>> GetEventOPRsAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/oprs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventOPRs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventOPRs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventOPRs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventOPRs)));
        }

        /// <summary>
        ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object GetEventPredictions ()
        {
             ApiResponse<Object> localVarResponse = GetEventPredictionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetEventPredictionsWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/predictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventPredictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetEventPredictionsAsync ()
        {
             ApiResponse<Object> localVarResponse = await GetEventPredictionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEventPredictionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/predictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventPredictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventRanking</returns>
        public EventRanking GetEventRankings ()
        {
             ApiResponse<EventRanking> localVarResponse = GetEventRankingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventRanking</returns>
        public ApiResponse< EventRanking > GetEventRankingsWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/rankings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventRankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventRanking>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventRanking) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventRanking)));
        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventRanking</returns>
        public async System.Threading.Tasks.Task<EventRanking> GetEventRankingsAsync ()
        {
             ApiResponse<EventRanking> localVarResponse = await GetEventRankingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of team rankings for the Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventRanking)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventRanking>> GetEventRankingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/rankings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventRankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventRanking>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventRanking) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventRanking)));
        }

        /// <summary>
        ///  Gets a short-form Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EventSimple</returns>
        public EventSimple GetEventSimple ()
        {
             ApiResponse<EventSimple> localVarResponse = GetEventSimpleWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EventSimple</returns>
        public ApiResponse< EventSimple > GetEventSimpleWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventSimple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventSimple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventSimple)));
        }

        /// <summary>
        ///  Gets a short-form Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EventSimple</returns>
        public async System.Threading.Tasks.Task<EventSimple> GetEventSimpleAsync ()
        {
             ApiResponse<EventSimple> localVarResponse = await GetEventSimpleAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form Event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EventSimple)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventSimple>> GetEventSimpleAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventSimple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventSimple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventSimple)));
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetEventTeams ()
        {
             ApiResponse<List<Team>> localVarResponse = GetEventTeamsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse< List<Team> > GetEventTeamsWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetEventTeamsAsync ()
        {
             ApiResponse<List<Team>> localVarResponse = await GetEventTeamsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetEventTeamsAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventTeamsKeys ()
        {
             ApiResponse<List<string>> localVarResponse = GetEventTeamsKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetEventTeamsKeysWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/teams/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTeamsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventTeamsKeysAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetEventTeamsKeysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of &#x60;Team&#x60; keys that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventTeamsKeysAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/teams/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTeamsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TeamSimple&gt;</returns>
        public List<TeamSimple> GetEventTeamsSimple ()
        {
             ApiResponse<List<TeamSimple>> localVarResponse = GetEventTeamsSimpleWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TeamSimple&gt;</returns>
        public ApiResponse< List<TeamSimple> > GetEventTeamsSimpleWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/teams/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTeamsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TeamSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamSimple>)));
        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TeamSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSimple>> GetEventTeamsSimpleAsync ()
        {
             ApiResponse<List<TeamSimple>> localVarResponse = await GetEventTeamsSimpleAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TeamSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamSimple>>> GetEventTeamsSimpleAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/teams/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTeamsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TeamSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamSimple>)));
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public Dictionary<string, TeamEventStatus> GetEventTeamsStatuses ()
        {
             ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetEventTeamsStatusesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public ApiResponse< Dictionary<string, TeamEventStatus> > GetEventTeamsStatusesWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/teams/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, TeamEventStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, TeamEventStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, TeamEventStatus>)));
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetEventTeamsStatusesAsync ()
        {
             ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetEventTeamsStatusesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for teams competing at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetEventTeamsStatusesAsyncWithHttpInfo ()
        {

            var localVarPath = "/event/{event_key}/teams/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTeamsStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, TeamEventStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, TeamEventStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, TeamEventStatus>)));
        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetEventsByYear ()
        {
             ApiResponse<List<Event>> localVarResponse = GetEventsByYearWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public ApiResponse< List<Event> > GetEventsByYearWithHttpInfo ()
        {

            var localVarPath = "/events/{year}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Event>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Event>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Event>)));
        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetEventsByYearAsync ()
        {
             ApiResponse<List<Event>> localVarResponse = await GetEventsByYearAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetEventsByYearAsyncWithHttpInfo ()
        {

            var localVarPath = "/events/{year}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Event>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Event>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Event>)));
        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetEventsByYearKeys ()
        {
             ApiResponse<List<string>> localVarResponse = GetEventsByYearKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetEventsByYearKeysWithHttpInfo ()
        {

            var localVarPath = "/events/{year}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsByYearKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetEventsByYearKeysAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetEventsByYearKeysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of event keys in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetEventsByYearKeysAsyncWithHttpInfo ()
        {

            var localVarPath = "/events/{year}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsByYearKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetEventsByYearSimple ()
        {
             ApiResponse<List<EventSimple>> localVarResponse = GetEventsByYearSimpleWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public ApiResponse< List<EventSimple> > GetEventsByYearSimpleWithHttpInfo ()
        {

            var localVarPath = "/events/{year}/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsByYearSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetEventsByYearSimpleAsync ()
        {
             ApiResponse<List<EventSimple>> localVarResponse = await GetEventsByYearSimpleAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetEventsByYearSimpleAsyncWithHttpInfo ()
        {

            var localVarPath = "/events/{year}/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsByYearSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Award&gt;</returns>
        public List<Award> GetTeamEventAwards ()
        {
             ApiResponse<List<Award>> localVarResponse = GetTeamEventAwardsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Award&gt;</returns>
        public ApiResponse< List<Award> > GetTeamEventAwardsWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/awards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventAwards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Award>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Award>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Award>)));
        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Award&gt;</returns>
        public async System.Threading.Tasks.Task<List<Award>> GetTeamEventAwardsAsync ()
        {
             ApiResponse<List<Award>> localVarResponse = await GetTeamEventAwardsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of awards the given team won at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Award&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Award>>> GetTeamEventAwardsAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/awards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventAwards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Award>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Award>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Award>)));
        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetTeamEventMatches ()
        {
             ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public ApiResponse< List<Match> > GetTeamEventMatchesWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventMatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Match>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Match>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Match>)));
        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesAsync ()
        {
             ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/matches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventMatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Match>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Match>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Match>)));
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamEventMatchesKeys ()
        {
             ApiResponse<List<string>> localVarResponse = GetTeamEventMatchesKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetTeamEventMatchesKeysWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/matches/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamEventMatchesKeysAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetTeamEventMatchesKeysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of match keys for matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventMatchesKeysAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/matches/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventMatchesKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetTeamEventMatchesSimple ()
        {
             ApiResponse<List<Match>> localVarResponse = GetTeamEventMatchesSimpleWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public ApiResponse< List<Match> > GetTeamEventMatchesSimpleWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/matches/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Match>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Match>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Match>)));
        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetTeamEventMatchesSimpleAsync ()
        {
             ApiResponse<List<Match>> localVarResponse = await GetTeamEventMatchesSimpleAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of matches for the given team and event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetTeamEventMatchesSimpleAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/matches/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventMatchesSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Match>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Match>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Match>)));
        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamEventStatus</returns>
        public TeamEventStatus GetTeamEventStatus ()
        {
             ApiResponse<TeamEventStatus> localVarResponse = GetTeamEventStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamEventStatus</returns>
        public ApiResponse< TeamEventStatus > GetTeamEventStatusWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamEventStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamEventStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamEventStatus)));
        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamEventStatus</returns>
        public async System.Threading.Tasks.Task<TeamEventStatus> GetTeamEventStatusAsync ()
        {
             ApiResponse<TeamEventStatus> localVarResponse = await GetTeamEventStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the competition rank and status of the team at the given event.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamEventStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamEventStatus>> GetTeamEventStatusAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/event/{event_key}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamEventStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamEventStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamEventStatus)));
        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetTeamEvents ()
        {
             ApiResponse<List<Event>> localVarResponse = GetTeamEventsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public ApiResponse< List<Event> > GetTeamEventsWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Event>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Event>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Event>)));
        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetTeamEventsAsync ()
        {
             ApiResponse<List<Event>> localVarResponse = await GetTeamEventsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetTeamEventsAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Event>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Event>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Event>)));
        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> GetTeamEventsByYear ()
        {
             ApiResponse<List<Event>> localVarResponse = GetTeamEventsByYearWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public ApiResponse< List<Event> > GetTeamEventsByYearWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/{year}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Event>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Event>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Event>)));
        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> GetTeamEventsByYearAsync ()
        {
             ApiResponse<List<Event>> localVarResponse = await GetTeamEventsByYearAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Event>>> GetTeamEventsByYearAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/{year}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Event>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Event>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Event>)));
        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamEventsByYearKeys ()
        {
             ApiResponse<List<string>> localVarResponse = GetTeamEventsByYearKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetTeamEventsByYearKeysWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/{year}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsByYearKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamEventsByYearKeysAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetTeamEventsByYearKeysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of the event keys for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventsByYearKeysAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/{year}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsByYearKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetTeamEventsByYearSimple ()
        {
             ApiResponse<List<EventSimple>> localVarResponse = GetTeamEventsByYearSimpleWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public ApiResponse< List<EventSimple> > GetTeamEventsByYearSimpleWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/{year}/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsByYearSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsByYearSimpleAsync ()
        {
             ApiResponse<List<EventSimple>> localVarResponse = await GetTeamEventsByYearSimpleAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetTeamEventsByYearSimpleAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/{year}/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsByYearSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTeamEventsKeys ()
        {
             ApiResponse<List<string>> localVarResponse = GetTeamEventsKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetTeamEventsKeysWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTeamEventsKeysAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetTeamEventsKeysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of the event keys for all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTeamEventsKeysAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventSimple&gt;</returns>
        public List<EventSimple> GetTeamEventsSimple ()
        {
             ApiResponse<List<EventSimple>> localVarResponse = GetTeamEventsSimpleWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventSimple&gt;</returns>
        public ApiResponse< List<EventSimple> > GetTeamEventsSimpleWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventSimple&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventSimple>> GetTeamEventsSimpleAsync ()
        {
             ApiResponse<List<EventSimple>> localVarResponse = await GetTeamEventsSimpleAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a short-form list of all events this team has competed at.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventSimple&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventSimple>>> GetTeamEventsSimpleAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/simple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventSimple>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EventSimple>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventSimple>)));
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public Dictionary<string, TeamEventStatus> GetTeamEventsStatusesByYear ()
        {
             ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = GetTeamEventsStatusesByYearWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public ApiResponse< Dictionary<string, TeamEventStatus> > GetTeamEventsStatusesByYearWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/{year}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, TeamEventStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, TeamEventStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, TeamEventStatus>)));
        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, TeamEventStatus&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, TeamEventStatus>> GetTeamEventsStatusesByYearAsync ()
        {
             ApiResponse<Dictionary<string, TeamEventStatus>> localVarResponse = await GetTeamEventsStatusesByYearAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a key-value list of the event statuses for events this team has competed at in the given year.
        /// </summary>
        /// <exception cref="com.tweirtx.TBAAPIv3client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, TeamEventStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, TeamEventStatus>>> GetTeamEventsStatusesByYearAsyncWithHttpInfo ()
        {

            var localVarPath = "/team/{team_key}/events/{year}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
            {
                localVarHeaderParams["X-TBA-Auth-Key"] = this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamEventsStatusesByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, TeamEventStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, TeamEventStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, TeamEventStatus>)));
        }

    }
}

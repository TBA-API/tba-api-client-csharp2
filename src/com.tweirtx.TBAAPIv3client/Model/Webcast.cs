/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.tweirtx.TBAAPIv3client.Client.SwaggerDateConverter;

namespace com.tweirtx.TBAAPIv3client.Model
{
    /// <summary>
    /// Webcast
    /// </summary>
    [DataContract]
    public partial class Webcast :  IEquatable<Webcast>, IValidatableObject
    {
        /// <summary>
        /// Type of webcast, typically descriptive of the streaming provider.
        /// </summary>
        /// <value>Type of webcast, typically descriptive of the streaming provider.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Youtube for value: youtube
            /// </summary>
            [EnumMember(Value = "youtube")]
            Youtube = 1,
            
            /// <summary>
            /// Enum Twitch for value: twitch
            /// </summary>
            [EnumMember(Value = "twitch")]
            Twitch = 2,
            
            /// <summary>
            /// Enum Ustream for value: ustream
            /// </summary>
            [EnumMember(Value = "ustream")]
            Ustream = 3,
            
            /// <summary>
            /// Enum Iframe for value: iframe
            /// </summary>
            [EnumMember(Value = "iframe")]
            Iframe = 4,
            
            /// <summary>
            /// Enum Html5 for value: html5
            /// </summary>
            [EnumMember(Value = "html5")]
            Html5 = 5,
            
            /// <summary>
            /// Enum Rtmp for value: rtmp
            /// </summary>
            [EnumMember(Value = "rtmp")]
            Rtmp = 6,
            
            /// <summary>
            /// Enum Livestream for value: livestream
            /// </summary>
            [EnumMember(Value = "livestream")]
            Livestream = 7
        }

        /// <summary>
        /// Type of webcast, typically descriptive of the streaming provider.
        /// </summary>
        /// <value>Type of webcast, typically descriptive of the streaming provider.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webcast" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Webcast() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webcast" /> class.
        /// </summary>
        /// <param name="Type">Type of webcast, typically descriptive of the streaming provider. (required).</param>
        /// <param name="Channel">Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe. (required).</param>
        /// <param name="File">File identification as may be required for some types. May be null..</param>
        public Webcast(TypeEnum Type = default(TypeEnum), string Channel = default(string), string File = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for Webcast and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Channel" is required (not null)
            if (Channel == null)
            {
                throw new InvalidDataException("Channel is a required property for Webcast and cannot be null");
            }
            else
            {
                this.Channel = Channel;
            }
            this.File = File;
        }
        

        /// <summary>
        /// Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.
        /// </summary>
        /// <value>Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }

        /// <summary>
        /// File identification as may be required for some types. May be null.
        /// </summary>
        /// <value>File identification as may be required for some types. May be null.</value>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string File { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webcast {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Webcast);
        }

        /// <summary>
        /// Returns true if Webcast instances are equal
        /// </summary>
        /// <param name="input">Instance of Webcast to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webcast input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

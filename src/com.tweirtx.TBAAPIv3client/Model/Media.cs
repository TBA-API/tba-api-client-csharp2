/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.tweirtx.TBAAPIv3client.Client.SwaggerDateConverter;

namespace com.tweirtx.TBAAPIv3client.Model
{
    /// <summary>
    /// The &#x60;Media&#x60; object contains a reference for most any media associated with a team or event on TBA.
    /// </summary>
    [DataContract]
    public partial class Media :  IEquatable<Media>, IValidatableObject
    {
        /// <summary>
        /// String type of the media element.
        /// </summary>
        /// <value>String type of the media element.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Youtube for value: youtube
            /// </summary>
            [EnumMember(Value = "youtube")]
            Youtube = 1,
            
            /// <summary>
            /// Enum Cdphotothread for value: cdphotothread
            /// </summary>
            [EnumMember(Value = "cdphotothread")]
            Cdphotothread = 2,
            
            /// <summary>
            /// Enum Imgur for value: imgur
            /// </summary>
            [EnumMember(Value = "imgur")]
            Imgur = 3,
            
            /// <summary>
            /// Enum FacebookProfile for value: facebook-profile
            /// </summary>
            [EnumMember(Value = "facebook-profile")]
            FacebookProfile = 4,
            
            /// <summary>
            /// Enum YoutubeChannel for value: youtube-channel
            /// </summary>
            [EnumMember(Value = "youtube-channel")]
            YoutubeChannel = 5,
            
            /// <summary>
            /// Enum TwitterProfile for value: twitter-profile
            /// </summary>
            [EnumMember(Value = "twitter-profile")]
            TwitterProfile = 6,
            
            /// <summary>
            /// Enum GithubProfile for value: github-profile
            /// </summary>
            [EnumMember(Value = "github-profile")]
            GithubProfile = 7,
            
            /// <summary>
            /// Enum InstagramProfile for value: instagram-profile
            /// </summary>
            [EnumMember(Value = "instagram-profile")]
            InstagramProfile = 8,
            
            /// <summary>
            /// Enum PeriscopeProfile for value: periscope-profile
            /// </summary>
            [EnumMember(Value = "periscope-profile")]
            PeriscopeProfile = 9,
            
            /// <summary>
            /// Enum Grabcad for value: grabcad
            /// </summary>
            [EnumMember(Value = "grabcad")]
            Grabcad = 10,
            
            /// <summary>
            /// Enum InstagramImage for value: instagram-image
            /// </summary>
            [EnumMember(Value = "instagram-image")]
            InstagramImage = 11,
            
            /// <summary>
            /// Enum ExternalLink for value: external-link
            /// </summary>
            [EnumMember(Value = "external-link")]
            ExternalLink = 12,
            
            /// <summary>
            /// Enum Avatar for value: avatar
            /// </summary>
            [EnumMember(Value = "avatar")]
            Avatar = 13
        }

        /// <summary>
        /// String type of the media element.
        /// </summary>
        /// <value>String type of the media element.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Media" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Media() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Media" /> class.
        /// </summary>
        /// <param name="Key">TBA identifier for this media. (required).</param>
        /// <param name="Type">String type of the media element. (required).</param>
        /// <param name="ForeignKey">The key used to identify this media on the media site..</param>
        /// <param name="Details">If required, a JSON dict of additional media information..</param>
        /// <param name="Preferred">True if the media is of high quality..</param>
        public Media(string Key = default(string), TypeEnum Type = default(TypeEnum), string ForeignKey = default(string), Object Details = default(Object), bool? Preferred = default(bool?))
        {
            // to ensure "Key" is required (not null)
            if (Key == null)
            {
                throw new InvalidDataException("Key is a required property for Media and cannot be null");
            }
            else
            {
                this.Key = Key;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for Media and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.ForeignKey = ForeignKey;
            this.Details = Details;
            this.Preferred = Preferred;
        }
        
        /// <summary>
        /// TBA identifier for this media.
        /// </summary>
        /// <value>TBA identifier for this media.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }


        /// <summary>
        /// The key used to identify this media on the media site.
        /// </summary>
        /// <value>The key used to identify this media on the media site.</value>
        [DataMember(Name="foreign_key", EmitDefaultValue=false)]
        public string ForeignKey { get; set; }

        /// <summary>
        /// If required, a JSON dict of additional media information.
        /// </summary>
        /// <value>If required, a JSON dict of additional media information.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public Object Details { get; set; }

        /// <summary>
        /// True if the media is of high quality.
        /// </summary>
        /// <value>True if the media is of high quality.</value>
        [DataMember(Name="preferred", EmitDefaultValue=false)]
        public bool? Preferred { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Media {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ForeignKey: ").Append(ForeignKey).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Preferred: ").Append(Preferred).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Media);
        }

        /// <summary>
        /// Returns true if Media instances are equal
        /// </summary>
        /// <param name="input">Instance of Media to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Media input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ForeignKey == input.ForeignKey ||
                    (this.ForeignKey != null &&
                    this.ForeignKey.Equals(input.ForeignKey))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Preferred == input.Preferred ||
                    (this.Preferred != null &&
                    this.Preferred.Equals(input.Preferred))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ForeignKey != null)
                    hashCode = hashCode * 59 + this.ForeignKey.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Preferred != null)
                    hashCode = hashCode * 59 + this.Preferred.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.03.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.tweirtx.TBAAPIv3client.Client.SwaggerDateConverter;

namespace com.tweirtx.TBAAPIv3client.Model
{
    /// <summary>
    /// Insights for FIRST Power Up qualification and elimination matches.
    /// </summary>
    [DataContract]
    public partial class EventInsights2018 :  IEquatable<EventInsights2018>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventInsights2018" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventInsights2018() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventInsights2018" /> class.
        /// </summary>
        /// <param name="AutoQuestAchieved">An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage. (required).</param>
        /// <param name="AverageBoostPlayed">Average number of boost power up scored (out of 3). (required).</param>
        /// <param name="AverageEndgamePoints">Average endgame points. (required).</param>
        /// <param name="AverageForcePlayed">Average number of force power up scored (out of 3). (required).</param>
        /// <param name="AverageFoulScore">Average foul score. (required).</param>
        /// <param name="AveragePointsAuto">Average points scored during auto. (required).</param>
        /// <param name="AveragePointsTeleop">Average points scored during teleop. (required).</param>
        /// <param name="AverageRunPointsAuto">Average mobility points scored during auto. (required).</param>
        /// <param name="AverageScaleOwnershipPoints">Average scale ownership points scored. (required).</param>
        /// <param name="AverageScaleOwnershipPointsAuto">Average scale ownership points scored during auto. (required).</param>
        /// <param name="AverageScaleOwnershipPointsTeleop">Average scale ownership points scored during teleop. (required).</param>
        /// <param name="AverageScore">Average score. (required).</param>
        /// <param name="AverageSwitchOwnershipPoints">Average switch ownership points scored. (required).</param>
        /// <param name="AverageSwitchOwnershipPointsAuto">Average switch ownership points scored during auto. (required).</param>
        /// <param name="AverageSwitchOwnershipPointsTeleop">Average switch ownership points scored during teleop. (required).</param>
        /// <param name="AverageVaultPoints">Average value points scored. (required).</param>
        /// <param name="AverageWinMargin">Average margin of victory. (required).</param>
        /// <param name="AverageWinScore">Average winning score. (required).</param>
        /// <param name="BoostPlayedCounts">An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage. (required).</param>
        /// <param name="ClimbCounts">An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage. (required).</param>
        /// <param name="FaceTheBossAchieved">An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage. (required).</param>
        /// <param name="ForcePlayedCounts">An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage. (required).</param>
        /// <param name="HighScore">An array with three values, high score, match key from the match with the high score, and the name of the match (required).</param>
        /// <param name="LevitatePlayedCounts">An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage. (required).</param>
        /// <param name="RunCountsAuto">An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage. (required).</param>
        /// <param name="ScaleNeutralPercentage">Average scale neutral percentage. (required).</param>
        /// <param name="ScaleNeutralPercentageAuto">Average scale neutral percentage during auto. (required).</param>
        /// <param name="ScaleNeutralPercentageTeleop">Average scale neutral percentage during teleop. (required).</param>
        /// <param name="SwitchOwnedCountsAuto">An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage. (required).</param>
        /// <param name="UnicornMatches">An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage. (required).</param>
        /// <param name="WinningOppSwitchDenialPercentageTeleop">Average opposing switch denail percentage for the winning alliance during teleop. (required).</param>
        /// <param name="WinningOwnSwitchOwnershipPercentage">Average own switch ownership percentage for the winning alliance. (required).</param>
        /// <param name="WinningOwnSwitchOwnershipPercentageAuto">Average own switch ownership percentage for the winning alliance during auto. (required).</param>
        /// <param name="WinningOwnSwitchOwnershipPercentageTeleop">Average own switch ownership percentage for the winning alliance during teleop. (required).</param>
        /// <param name="WinningScaleOwnershipPercentage">Average scale ownership percentage for the winning alliance. (required).</param>
        /// <param name="WinningScaleOwnershipPercentageAuto">Average scale ownership percentage for the winning alliance during auto. (required).</param>
        /// <param name="WinningScaleOwnershipPercentageTeleop">Average scale ownership percentage for the winning alliance during teleop. (required).</param>
        public EventInsights2018(List<float?> AutoQuestAchieved = default(List<float?>), float? AverageBoostPlayed = default(float?), float? AverageEndgamePoints = default(float?), float? AverageForcePlayed = default(float?), float? AverageFoulScore = default(float?), float? AveragePointsAuto = default(float?), float? AveragePointsTeleop = default(float?), float? AverageRunPointsAuto = default(float?), float? AverageScaleOwnershipPoints = default(float?), float? AverageScaleOwnershipPointsAuto = default(float?), float? AverageScaleOwnershipPointsTeleop = default(float?), float? AverageScore = default(float?), float? AverageSwitchOwnershipPoints = default(float?), float? AverageSwitchOwnershipPointsAuto = default(float?), float? AverageSwitchOwnershipPointsTeleop = default(float?), float? AverageVaultPoints = default(float?), float? AverageWinMargin = default(float?), float? AverageWinScore = default(float?), List<float?> BoostPlayedCounts = default(List<float?>), List<float?> ClimbCounts = default(List<float?>), List<float?> FaceTheBossAchieved = default(List<float?>), List<float?> ForcePlayedCounts = default(List<float?>), List<string> HighScore = default(List<string>), List<float?> LevitatePlayedCounts = default(List<float?>), List<float?> RunCountsAuto = default(List<float?>), float? ScaleNeutralPercentage = default(float?), float? ScaleNeutralPercentageAuto = default(float?), float? ScaleNeutralPercentageTeleop = default(float?), List<float?> SwitchOwnedCountsAuto = default(List<float?>), List<float?> UnicornMatches = default(List<float?>), float? WinningOppSwitchDenialPercentageTeleop = default(float?), float? WinningOwnSwitchOwnershipPercentage = default(float?), float? WinningOwnSwitchOwnershipPercentageAuto = default(float?), float? WinningOwnSwitchOwnershipPercentageTeleop = default(float?), float? WinningScaleOwnershipPercentage = default(float?), float? WinningScaleOwnershipPercentageAuto = default(float?), float? WinningScaleOwnershipPercentageTeleop = default(float?))
        {
            // to ensure "AutoQuestAchieved" is required (not null)
            if (AutoQuestAchieved == null)
            {
                throw new InvalidDataException("AutoQuestAchieved is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AutoQuestAchieved = AutoQuestAchieved;
            }
            // to ensure "AverageBoostPlayed" is required (not null)
            if (AverageBoostPlayed == null)
            {
                throw new InvalidDataException("AverageBoostPlayed is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageBoostPlayed = AverageBoostPlayed;
            }
            // to ensure "AverageEndgamePoints" is required (not null)
            if (AverageEndgamePoints == null)
            {
                throw new InvalidDataException("AverageEndgamePoints is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageEndgamePoints = AverageEndgamePoints;
            }
            // to ensure "AverageForcePlayed" is required (not null)
            if (AverageForcePlayed == null)
            {
                throw new InvalidDataException("AverageForcePlayed is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageForcePlayed = AverageForcePlayed;
            }
            // to ensure "AverageFoulScore" is required (not null)
            if (AverageFoulScore == null)
            {
                throw new InvalidDataException("AverageFoulScore is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageFoulScore = AverageFoulScore;
            }
            // to ensure "AveragePointsAuto" is required (not null)
            if (AveragePointsAuto == null)
            {
                throw new InvalidDataException("AveragePointsAuto is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AveragePointsAuto = AveragePointsAuto;
            }
            // to ensure "AveragePointsTeleop" is required (not null)
            if (AveragePointsTeleop == null)
            {
                throw new InvalidDataException("AveragePointsTeleop is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AveragePointsTeleop = AveragePointsTeleop;
            }
            // to ensure "AverageRunPointsAuto" is required (not null)
            if (AverageRunPointsAuto == null)
            {
                throw new InvalidDataException("AverageRunPointsAuto is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageRunPointsAuto = AverageRunPointsAuto;
            }
            // to ensure "AverageScaleOwnershipPoints" is required (not null)
            if (AverageScaleOwnershipPoints == null)
            {
                throw new InvalidDataException("AverageScaleOwnershipPoints is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageScaleOwnershipPoints = AverageScaleOwnershipPoints;
            }
            // to ensure "AverageScaleOwnershipPointsAuto" is required (not null)
            if (AverageScaleOwnershipPointsAuto == null)
            {
                throw new InvalidDataException("AverageScaleOwnershipPointsAuto is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageScaleOwnershipPointsAuto = AverageScaleOwnershipPointsAuto;
            }
            // to ensure "AverageScaleOwnershipPointsTeleop" is required (not null)
            if (AverageScaleOwnershipPointsTeleop == null)
            {
                throw new InvalidDataException("AverageScaleOwnershipPointsTeleop is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageScaleOwnershipPointsTeleop = AverageScaleOwnershipPointsTeleop;
            }
            // to ensure "AverageScore" is required (not null)
            if (AverageScore == null)
            {
                throw new InvalidDataException("AverageScore is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageScore = AverageScore;
            }
            // to ensure "AverageSwitchOwnershipPoints" is required (not null)
            if (AverageSwitchOwnershipPoints == null)
            {
                throw new InvalidDataException("AverageSwitchOwnershipPoints is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageSwitchOwnershipPoints = AverageSwitchOwnershipPoints;
            }
            // to ensure "AverageSwitchOwnershipPointsAuto" is required (not null)
            if (AverageSwitchOwnershipPointsAuto == null)
            {
                throw new InvalidDataException("AverageSwitchOwnershipPointsAuto is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageSwitchOwnershipPointsAuto = AverageSwitchOwnershipPointsAuto;
            }
            // to ensure "AverageSwitchOwnershipPointsTeleop" is required (not null)
            if (AverageSwitchOwnershipPointsTeleop == null)
            {
                throw new InvalidDataException("AverageSwitchOwnershipPointsTeleop is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageSwitchOwnershipPointsTeleop = AverageSwitchOwnershipPointsTeleop;
            }
            // to ensure "AverageVaultPoints" is required (not null)
            if (AverageVaultPoints == null)
            {
                throw new InvalidDataException("AverageVaultPoints is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageVaultPoints = AverageVaultPoints;
            }
            // to ensure "AverageWinMargin" is required (not null)
            if (AverageWinMargin == null)
            {
                throw new InvalidDataException("AverageWinMargin is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageWinMargin = AverageWinMargin;
            }
            // to ensure "AverageWinScore" is required (not null)
            if (AverageWinScore == null)
            {
                throw new InvalidDataException("AverageWinScore is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.AverageWinScore = AverageWinScore;
            }
            // to ensure "BoostPlayedCounts" is required (not null)
            if (BoostPlayedCounts == null)
            {
                throw new InvalidDataException("BoostPlayedCounts is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.BoostPlayedCounts = BoostPlayedCounts;
            }
            // to ensure "ClimbCounts" is required (not null)
            if (ClimbCounts == null)
            {
                throw new InvalidDataException("ClimbCounts is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.ClimbCounts = ClimbCounts;
            }
            // to ensure "FaceTheBossAchieved" is required (not null)
            if (FaceTheBossAchieved == null)
            {
                throw new InvalidDataException("FaceTheBossAchieved is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.FaceTheBossAchieved = FaceTheBossAchieved;
            }
            // to ensure "ForcePlayedCounts" is required (not null)
            if (ForcePlayedCounts == null)
            {
                throw new InvalidDataException("ForcePlayedCounts is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.ForcePlayedCounts = ForcePlayedCounts;
            }
            // to ensure "HighScore" is required (not null)
            if (HighScore == null)
            {
                throw new InvalidDataException("HighScore is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.HighScore = HighScore;
            }
            // to ensure "LevitatePlayedCounts" is required (not null)
            if (LevitatePlayedCounts == null)
            {
                throw new InvalidDataException("LevitatePlayedCounts is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.LevitatePlayedCounts = LevitatePlayedCounts;
            }
            // to ensure "RunCountsAuto" is required (not null)
            if (RunCountsAuto == null)
            {
                throw new InvalidDataException("RunCountsAuto is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.RunCountsAuto = RunCountsAuto;
            }
            // to ensure "ScaleNeutralPercentage" is required (not null)
            if (ScaleNeutralPercentage == null)
            {
                throw new InvalidDataException("ScaleNeutralPercentage is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.ScaleNeutralPercentage = ScaleNeutralPercentage;
            }
            // to ensure "ScaleNeutralPercentageAuto" is required (not null)
            if (ScaleNeutralPercentageAuto == null)
            {
                throw new InvalidDataException("ScaleNeutralPercentageAuto is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.ScaleNeutralPercentageAuto = ScaleNeutralPercentageAuto;
            }
            // to ensure "ScaleNeutralPercentageTeleop" is required (not null)
            if (ScaleNeutralPercentageTeleop == null)
            {
                throw new InvalidDataException("ScaleNeutralPercentageTeleop is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.ScaleNeutralPercentageTeleop = ScaleNeutralPercentageTeleop;
            }
            // to ensure "SwitchOwnedCountsAuto" is required (not null)
            if (SwitchOwnedCountsAuto == null)
            {
                throw new InvalidDataException("SwitchOwnedCountsAuto is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.SwitchOwnedCountsAuto = SwitchOwnedCountsAuto;
            }
            // to ensure "UnicornMatches" is required (not null)
            if (UnicornMatches == null)
            {
                throw new InvalidDataException("UnicornMatches is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.UnicornMatches = UnicornMatches;
            }
            // to ensure "WinningOppSwitchDenialPercentageTeleop" is required (not null)
            if (WinningOppSwitchDenialPercentageTeleop == null)
            {
                throw new InvalidDataException("WinningOppSwitchDenialPercentageTeleop is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.WinningOppSwitchDenialPercentageTeleop = WinningOppSwitchDenialPercentageTeleop;
            }
            // to ensure "WinningOwnSwitchOwnershipPercentage" is required (not null)
            if (WinningOwnSwitchOwnershipPercentage == null)
            {
                throw new InvalidDataException("WinningOwnSwitchOwnershipPercentage is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.WinningOwnSwitchOwnershipPercentage = WinningOwnSwitchOwnershipPercentage;
            }
            // to ensure "WinningOwnSwitchOwnershipPercentageAuto" is required (not null)
            if (WinningOwnSwitchOwnershipPercentageAuto == null)
            {
                throw new InvalidDataException("WinningOwnSwitchOwnershipPercentageAuto is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.WinningOwnSwitchOwnershipPercentageAuto = WinningOwnSwitchOwnershipPercentageAuto;
            }
            // to ensure "WinningOwnSwitchOwnershipPercentageTeleop" is required (not null)
            if (WinningOwnSwitchOwnershipPercentageTeleop == null)
            {
                throw new InvalidDataException("WinningOwnSwitchOwnershipPercentageTeleop is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.WinningOwnSwitchOwnershipPercentageTeleop = WinningOwnSwitchOwnershipPercentageTeleop;
            }
            // to ensure "WinningScaleOwnershipPercentage" is required (not null)
            if (WinningScaleOwnershipPercentage == null)
            {
                throw new InvalidDataException("WinningScaleOwnershipPercentage is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.WinningScaleOwnershipPercentage = WinningScaleOwnershipPercentage;
            }
            // to ensure "WinningScaleOwnershipPercentageAuto" is required (not null)
            if (WinningScaleOwnershipPercentageAuto == null)
            {
                throw new InvalidDataException("WinningScaleOwnershipPercentageAuto is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.WinningScaleOwnershipPercentageAuto = WinningScaleOwnershipPercentageAuto;
            }
            // to ensure "WinningScaleOwnershipPercentageTeleop" is required (not null)
            if (WinningScaleOwnershipPercentageTeleop == null)
            {
                throw new InvalidDataException("WinningScaleOwnershipPercentageTeleop is a required property for EventInsights2018 and cannot be null");
            }
            else
            {
                this.WinningScaleOwnershipPercentageTeleop = WinningScaleOwnershipPercentageTeleop;
            }
        }
        
        /// <summary>
        /// An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.</value>
        [DataMember(Name="auto_quest_achieved", EmitDefaultValue=false)]
        public List<float?> AutoQuestAchieved { get; set; }

        /// <summary>
        /// Average number of boost power up scored (out of 3).
        /// </summary>
        /// <value>Average number of boost power up scored (out of 3).</value>
        [DataMember(Name="average_boost_played", EmitDefaultValue=false)]
        public float? AverageBoostPlayed { get; set; }

        /// <summary>
        /// Average endgame points.
        /// </summary>
        /// <value>Average endgame points.</value>
        [DataMember(Name="average_endgame_points", EmitDefaultValue=false)]
        public float? AverageEndgamePoints { get; set; }

        /// <summary>
        /// Average number of force power up scored (out of 3).
        /// </summary>
        /// <value>Average number of force power up scored (out of 3).</value>
        [DataMember(Name="average_force_played", EmitDefaultValue=false)]
        public float? AverageForcePlayed { get; set; }

        /// <summary>
        /// Average foul score.
        /// </summary>
        /// <value>Average foul score.</value>
        [DataMember(Name="average_foul_score", EmitDefaultValue=false)]
        public float? AverageFoulScore { get; set; }

        /// <summary>
        /// Average points scored during auto.
        /// </summary>
        /// <value>Average points scored during auto.</value>
        [DataMember(Name="average_points_auto", EmitDefaultValue=false)]
        public float? AveragePointsAuto { get; set; }

        /// <summary>
        /// Average points scored during teleop.
        /// </summary>
        /// <value>Average points scored during teleop.</value>
        [DataMember(Name="average_points_teleop", EmitDefaultValue=false)]
        public float? AveragePointsTeleop { get; set; }

        /// <summary>
        /// Average mobility points scored during auto.
        /// </summary>
        /// <value>Average mobility points scored during auto.</value>
        [DataMember(Name="average_run_points_auto", EmitDefaultValue=false)]
        public float? AverageRunPointsAuto { get; set; }

        /// <summary>
        /// Average scale ownership points scored.
        /// </summary>
        /// <value>Average scale ownership points scored.</value>
        [DataMember(Name="average_scale_ownership_points", EmitDefaultValue=false)]
        public float? AverageScaleOwnershipPoints { get; set; }

        /// <summary>
        /// Average scale ownership points scored during auto.
        /// </summary>
        /// <value>Average scale ownership points scored during auto.</value>
        [DataMember(Name="average_scale_ownership_points_auto", EmitDefaultValue=false)]
        public float? AverageScaleOwnershipPointsAuto { get; set; }

        /// <summary>
        /// Average scale ownership points scored during teleop.
        /// </summary>
        /// <value>Average scale ownership points scored during teleop.</value>
        [DataMember(Name="average_scale_ownership_points_teleop", EmitDefaultValue=false)]
        public float? AverageScaleOwnershipPointsTeleop { get; set; }

        /// <summary>
        /// Average score.
        /// </summary>
        /// <value>Average score.</value>
        [DataMember(Name="average_score", EmitDefaultValue=false)]
        public float? AverageScore { get; set; }

        /// <summary>
        /// Average switch ownership points scored.
        /// </summary>
        /// <value>Average switch ownership points scored.</value>
        [DataMember(Name="average_switch_ownership_points", EmitDefaultValue=false)]
        public float? AverageSwitchOwnershipPoints { get; set; }

        /// <summary>
        /// Average switch ownership points scored during auto.
        /// </summary>
        /// <value>Average switch ownership points scored during auto.</value>
        [DataMember(Name="average_switch_ownership_points_auto", EmitDefaultValue=false)]
        public float? AverageSwitchOwnershipPointsAuto { get; set; }

        /// <summary>
        /// Average switch ownership points scored during teleop.
        /// </summary>
        /// <value>Average switch ownership points scored during teleop.</value>
        [DataMember(Name="average_switch_ownership_points_teleop", EmitDefaultValue=false)]
        public float? AverageSwitchOwnershipPointsTeleop { get; set; }

        /// <summary>
        /// Average value points scored.
        /// </summary>
        /// <value>Average value points scored.</value>
        [DataMember(Name="average_vault_points", EmitDefaultValue=false)]
        public float? AverageVaultPoints { get; set; }

        /// <summary>
        /// Average margin of victory.
        /// </summary>
        /// <value>Average margin of victory.</value>
        [DataMember(Name="average_win_margin", EmitDefaultValue=false)]
        public float? AverageWinMargin { get; set; }

        /// <summary>
        /// Average winning score.
        /// </summary>
        /// <value>Average winning score.</value>
        [DataMember(Name="average_win_score", EmitDefaultValue=false)]
        public float? AverageWinScore { get; set; }

        /// <summary>
        /// An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.</value>
        [DataMember(Name="boost_played_counts", EmitDefaultValue=false)]
        public List<float?> BoostPlayedCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.</value>
        [DataMember(Name="climb_counts", EmitDefaultValue=false)]
        public List<float?> ClimbCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.</value>
        [DataMember(Name="face_the_boss_achieved", EmitDefaultValue=false)]
        public List<float?> FaceTheBossAchieved { get; set; }

        /// <summary>
        /// An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.</value>
        [DataMember(Name="force_played_counts", EmitDefaultValue=false)]
        public List<float?> ForcePlayedCounts { get; set; }

        /// <summary>
        /// An array with three values, high score, match key from the match with the high score, and the name of the match
        /// </summary>
        /// <value>An array with three values, high score, match key from the match with the high score, and the name of the match</value>
        [DataMember(Name="high_score", EmitDefaultValue=false)]
        public List<string> HighScore { get; set; }

        /// <summary>
        /// An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.</value>
        [DataMember(Name="levitate_played_counts", EmitDefaultValue=false)]
        public List<float?> LevitatePlayedCounts { get; set; }

        /// <summary>
        /// An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.</value>
        [DataMember(Name="run_counts_auto", EmitDefaultValue=false)]
        public List<float?> RunCountsAuto { get; set; }

        /// <summary>
        /// Average scale neutral percentage.
        /// </summary>
        /// <value>Average scale neutral percentage.</value>
        [DataMember(Name="scale_neutral_percentage", EmitDefaultValue=false)]
        public float? ScaleNeutralPercentage { get; set; }

        /// <summary>
        /// Average scale neutral percentage during auto.
        /// </summary>
        /// <value>Average scale neutral percentage during auto.</value>
        [DataMember(Name="scale_neutral_percentage_auto", EmitDefaultValue=false)]
        public float? ScaleNeutralPercentageAuto { get; set; }

        /// <summary>
        /// Average scale neutral percentage during teleop.
        /// </summary>
        /// <value>Average scale neutral percentage during teleop.</value>
        [DataMember(Name="scale_neutral_percentage_teleop", EmitDefaultValue=false)]
        public float? ScaleNeutralPercentageTeleop { get; set; }

        /// <summary>
        /// An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.</value>
        [DataMember(Name="switch_owned_counts_auto", EmitDefaultValue=false)]
        public List<float?> SwitchOwnedCountsAuto { get; set; }

        /// <summary>
        /// An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.
        /// </summary>
        /// <value>An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.</value>
        [DataMember(Name="unicorn_matches", EmitDefaultValue=false)]
        public List<float?> UnicornMatches { get; set; }

        /// <summary>
        /// Average opposing switch denail percentage for the winning alliance during teleop.
        /// </summary>
        /// <value>Average opposing switch denail percentage for the winning alliance during teleop.</value>
        [DataMember(Name="winning_opp_switch_denial_percentage_teleop", EmitDefaultValue=false)]
        public float? WinningOppSwitchDenialPercentageTeleop { get; set; }

        /// <summary>
        /// Average own switch ownership percentage for the winning alliance.
        /// </summary>
        /// <value>Average own switch ownership percentage for the winning alliance.</value>
        [DataMember(Name="winning_own_switch_ownership_percentage", EmitDefaultValue=false)]
        public float? WinningOwnSwitchOwnershipPercentage { get; set; }

        /// <summary>
        /// Average own switch ownership percentage for the winning alliance during auto.
        /// </summary>
        /// <value>Average own switch ownership percentage for the winning alliance during auto.</value>
        [DataMember(Name="winning_own_switch_ownership_percentage_auto", EmitDefaultValue=false)]
        public float? WinningOwnSwitchOwnershipPercentageAuto { get; set; }

        /// <summary>
        /// Average own switch ownership percentage for the winning alliance during teleop.
        /// </summary>
        /// <value>Average own switch ownership percentage for the winning alliance during teleop.</value>
        [DataMember(Name="winning_own_switch_ownership_percentage_teleop", EmitDefaultValue=false)]
        public float? WinningOwnSwitchOwnershipPercentageTeleop { get; set; }

        /// <summary>
        /// Average scale ownership percentage for the winning alliance.
        /// </summary>
        /// <value>Average scale ownership percentage for the winning alliance.</value>
        [DataMember(Name="winning_scale_ownership_percentage", EmitDefaultValue=false)]
        public float? WinningScaleOwnershipPercentage { get; set; }

        /// <summary>
        /// Average scale ownership percentage for the winning alliance during auto.
        /// </summary>
        /// <value>Average scale ownership percentage for the winning alliance during auto.</value>
        [DataMember(Name="winning_scale_ownership_percentage_auto", EmitDefaultValue=false)]
        public float? WinningScaleOwnershipPercentageAuto { get; set; }

        /// <summary>
        /// Average scale ownership percentage for the winning alliance during teleop.
        /// </summary>
        /// <value>Average scale ownership percentage for the winning alliance during teleop.</value>
        [DataMember(Name="winning_scale_ownership_percentage_teleop", EmitDefaultValue=false)]
        public float? WinningScaleOwnershipPercentageTeleop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventInsights2018 {\n");
            sb.Append("  AutoQuestAchieved: ").Append(AutoQuestAchieved).Append("\n");
            sb.Append("  AverageBoostPlayed: ").Append(AverageBoostPlayed).Append("\n");
            sb.Append("  AverageEndgamePoints: ").Append(AverageEndgamePoints).Append("\n");
            sb.Append("  AverageForcePlayed: ").Append(AverageForcePlayed).Append("\n");
            sb.Append("  AverageFoulScore: ").Append(AverageFoulScore).Append("\n");
            sb.Append("  AveragePointsAuto: ").Append(AveragePointsAuto).Append("\n");
            sb.Append("  AveragePointsTeleop: ").Append(AveragePointsTeleop).Append("\n");
            sb.Append("  AverageRunPointsAuto: ").Append(AverageRunPointsAuto).Append("\n");
            sb.Append("  AverageScaleOwnershipPoints: ").Append(AverageScaleOwnershipPoints).Append("\n");
            sb.Append("  AverageScaleOwnershipPointsAuto: ").Append(AverageScaleOwnershipPointsAuto).Append("\n");
            sb.Append("  AverageScaleOwnershipPointsTeleop: ").Append(AverageScaleOwnershipPointsTeleop).Append("\n");
            sb.Append("  AverageScore: ").Append(AverageScore).Append("\n");
            sb.Append("  AverageSwitchOwnershipPoints: ").Append(AverageSwitchOwnershipPoints).Append("\n");
            sb.Append("  AverageSwitchOwnershipPointsAuto: ").Append(AverageSwitchOwnershipPointsAuto).Append("\n");
            sb.Append("  AverageSwitchOwnershipPointsTeleop: ").Append(AverageSwitchOwnershipPointsTeleop).Append("\n");
            sb.Append("  AverageVaultPoints: ").Append(AverageVaultPoints).Append("\n");
            sb.Append("  AverageWinMargin: ").Append(AverageWinMargin).Append("\n");
            sb.Append("  AverageWinScore: ").Append(AverageWinScore).Append("\n");
            sb.Append("  BoostPlayedCounts: ").Append(BoostPlayedCounts).Append("\n");
            sb.Append("  ClimbCounts: ").Append(ClimbCounts).Append("\n");
            sb.Append("  FaceTheBossAchieved: ").Append(FaceTheBossAchieved).Append("\n");
            sb.Append("  ForcePlayedCounts: ").Append(ForcePlayedCounts).Append("\n");
            sb.Append("  HighScore: ").Append(HighScore).Append("\n");
            sb.Append("  LevitatePlayedCounts: ").Append(LevitatePlayedCounts).Append("\n");
            sb.Append("  RunCountsAuto: ").Append(RunCountsAuto).Append("\n");
            sb.Append("  ScaleNeutralPercentage: ").Append(ScaleNeutralPercentage).Append("\n");
            sb.Append("  ScaleNeutralPercentageAuto: ").Append(ScaleNeutralPercentageAuto).Append("\n");
            sb.Append("  ScaleNeutralPercentageTeleop: ").Append(ScaleNeutralPercentageTeleop).Append("\n");
            sb.Append("  SwitchOwnedCountsAuto: ").Append(SwitchOwnedCountsAuto).Append("\n");
            sb.Append("  UnicornMatches: ").Append(UnicornMatches).Append("\n");
            sb.Append("  WinningOppSwitchDenialPercentageTeleop: ").Append(WinningOppSwitchDenialPercentageTeleop).Append("\n");
            sb.Append("  WinningOwnSwitchOwnershipPercentage: ").Append(WinningOwnSwitchOwnershipPercentage).Append("\n");
            sb.Append("  WinningOwnSwitchOwnershipPercentageAuto: ").Append(WinningOwnSwitchOwnershipPercentageAuto).Append("\n");
            sb.Append("  WinningOwnSwitchOwnershipPercentageTeleop: ").Append(WinningOwnSwitchOwnershipPercentageTeleop).Append("\n");
            sb.Append("  WinningScaleOwnershipPercentage: ").Append(WinningScaleOwnershipPercentage).Append("\n");
            sb.Append("  WinningScaleOwnershipPercentageAuto: ").Append(WinningScaleOwnershipPercentageAuto).Append("\n");
            sb.Append("  WinningScaleOwnershipPercentageTeleop: ").Append(WinningScaleOwnershipPercentageTeleop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventInsights2018);
        }

        /// <summary>
        /// Returns true if EventInsights2018 instances are equal
        /// </summary>
        /// <param name="input">Instance of EventInsights2018 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventInsights2018 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoQuestAchieved == input.AutoQuestAchieved ||
                    this.AutoQuestAchieved != null &&
                    this.AutoQuestAchieved.SequenceEqual(input.AutoQuestAchieved)
                ) && 
                (
                    this.AverageBoostPlayed == input.AverageBoostPlayed ||
                    (this.AverageBoostPlayed != null &&
                    this.AverageBoostPlayed.Equals(input.AverageBoostPlayed))
                ) && 
                (
                    this.AverageEndgamePoints == input.AverageEndgamePoints ||
                    (this.AverageEndgamePoints != null &&
                    this.AverageEndgamePoints.Equals(input.AverageEndgamePoints))
                ) && 
                (
                    this.AverageForcePlayed == input.AverageForcePlayed ||
                    (this.AverageForcePlayed != null &&
                    this.AverageForcePlayed.Equals(input.AverageForcePlayed))
                ) && 
                (
                    this.AverageFoulScore == input.AverageFoulScore ||
                    (this.AverageFoulScore != null &&
                    this.AverageFoulScore.Equals(input.AverageFoulScore))
                ) && 
                (
                    this.AveragePointsAuto == input.AveragePointsAuto ||
                    (this.AveragePointsAuto != null &&
                    this.AveragePointsAuto.Equals(input.AveragePointsAuto))
                ) && 
                (
                    this.AveragePointsTeleop == input.AveragePointsTeleop ||
                    (this.AveragePointsTeleop != null &&
                    this.AveragePointsTeleop.Equals(input.AveragePointsTeleop))
                ) && 
                (
                    this.AverageRunPointsAuto == input.AverageRunPointsAuto ||
                    (this.AverageRunPointsAuto != null &&
                    this.AverageRunPointsAuto.Equals(input.AverageRunPointsAuto))
                ) && 
                (
                    this.AverageScaleOwnershipPoints == input.AverageScaleOwnershipPoints ||
                    (this.AverageScaleOwnershipPoints != null &&
                    this.AverageScaleOwnershipPoints.Equals(input.AverageScaleOwnershipPoints))
                ) && 
                (
                    this.AverageScaleOwnershipPointsAuto == input.AverageScaleOwnershipPointsAuto ||
                    (this.AverageScaleOwnershipPointsAuto != null &&
                    this.AverageScaleOwnershipPointsAuto.Equals(input.AverageScaleOwnershipPointsAuto))
                ) && 
                (
                    this.AverageScaleOwnershipPointsTeleop == input.AverageScaleOwnershipPointsTeleop ||
                    (this.AverageScaleOwnershipPointsTeleop != null &&
                    this.AverageScaleOwnershipPointsTeleop.Equals(input.AverageScaleOwnershipPointsTeleop))
                ) && 
                (
                    this.AverageScore == input.AverageScore ||
                    (this.AverageScore != null &&
                    this.AverageScore.Equals(input.AverageScore))
                ) && 
                (
                    this.AverageSwitchOwnershipPoints == input.AverageSwitchOwnershipPoints ||
                    (this.AverageSwitchOwnershipPoints != null &&
                    this.AverageSwitchOwnershipPoints.Equals(input.AverageSwitchOwnershipPoints))
                ) && 
                (
                    this.AverageSwitchOwnershipPointsAuto == input.AverageSwitchOwnershipPointsAuto ||
                    (this.AverageSwitchOwnershipPointsAuto != null &&
                    this.AverageSwitchOwnershipPointsAuto.Equals(input.AverageSwitchOwnershipPointsAuto))
                ) && 
                (
                    this.AverageSwitchOwnershipPointsTeleop == input.AverageSwitchOwnershipPointsTeleop ||
                    (this.AverageSwitchOwnershipPointsTeleop != null &&
                    this.AverageSwitchOwnershipPointsTeleop.Equals(input.AverageSwitchOwnershipPointsTeleop))
                ) && 
                (
                    this.AverageVaultPoints == input.AverageVaultPoints ||
                    (this.AverageVaultPoints != null &&
                    this.AverageVaultPoints.Equals(input.AverageVaultPoints))
                ) && 
                (
                    this.AverageWinMargin == input.AverageWinMargin ||
                    (this.AverageWinMargin != null &&
                    this.AverageWinMargin.Equals(input.AverageWinMargin))
                ) && 
                (
                    this.AverageWinScore == input.AverageWinScore ||
                    (this.AverageWinScore != null &&
                    this.AverageWinScore.Equals(input.AverageWinScore))
                ) && 
                (
                    this.BoostPlayedCounts == input.BoostPlayedCounts ||
                    this.BoostPlayedCounts != null &&
                    this.BoostPlayedCounts.SequenceEqual(input.BoostPlayedCounts)
                ) && 
                (
                    this.ClimbCounts == input.ClimbCounts ||
                    this.ClimbCounts != null &&
                    this.ClimbCounts.SequenceEqual(input.ClimbCounts)
                ) && 
                (
                    this.FaceTheBossAchieved == input.FaceTheBossAchieved ||
                    this.FaceTheBossAchieved != null &&
                    this.FaceTheBossAchieved.SequenceEqual(input.FaceTheBossAchieved)
                ) && 
                (
                    this.ForcePlayedCounts == input.ForcePlayedCounts ||
                    this.ForcePlayedCounts != null &&
                    this.ForcePlayedCounts.SequenceEqual(input.ForcePlayedCounts)
                ) && 
                (
                    this.HighScore == input.HighScore ||
                    this.HighScore != null &&
                    this.HighScore.SequenceEqual(input.HighScore)
                ) && 
                (
                    this.LevitatePlayedCounts == input.LevitatePlayedCounts ||
                    this.LevitatePlayedCounts != null &&
                    this.LevitatePlayedCounts.SequenceEqual(input.LevitatePlayedCounts)
                ) && 
                (
                    this.RunCountsAuto == input.RunCountsAuto ||
                    this.RunCountsAuto != null &&
                    this.RunCountsAuto.SequenceEqual(input.RunCountsAuto)
                ) && 
                (
                    this.ScaleNeutralPercentage == input.ScaleNeutralPercentage ||
                    (this.ScaleNeutralPercentage != null &&
                    this.ScaleNeutralPercentage.Equals(input.ScaleNeutralPercentage))
                ) && 
                (
                    this.ScaleNeutralPercentageAuto == input.ScaleNeutralPercentageAuto ||
                    (this.ScaleNeutralPercentageAuto != null &&
                    this.ScaleNeutralPercentageAuto.Equals(input.ScaleNeutralPercentageAuto))
                ) && 
                (
                    this.ScaleNeutralPercentageTeleop == input.ScaleNeutralPercentageTeleop ||
                    (this.ScaleNeutralPercentageTeleop != null &&
                    this.ScaleNeutralPercentageTeleop.Equals(input.ScaleNeutralPercentageTeleop))
                ) && 
                (
                    this.SwitchOwnedCountsAuto == input.SwitchOwnedCountsAuto ||
                    this.SwitchOwnedCountsAuto != null &&
                    this.SwitchOwnedCountsAuto.SequenceEqual(input.SwitchOwnedCountsAuto)
                ) && 
                (
                    this.UnicornMatches == input.UnicornMatches ||
                    this.UnicornMatches != null &&
                    this.UnicornMatches.SequenceEqual(input.UnicornMatches)
                ) && 
                (
                    this.WinningOppSwitchDenialPercentageTeleop == input.WinningOppSwitchDenialPercentageTeleop ||
                    (this.WinningOppSwitchDenialPercentageTeleop != null &&
                    this.WinningOppSwitchDenialPercentageTeleop.Equals(input.WinningOppSwitchDenialPercentageTeleop))
                ) && 
                (
                    this.WinningOwnSwitchOwnershipPercentage == input.WinningOwnSwitchOwnershipPercentage ||
                    (this.WinningOwnSwitchOwnershipPercentage != null &&
                    this.WinningOwnSwitchOwnershipPercentage.Equals(input.WinningOwnSwitchOwnershipPercentage))
                ) && 
                (
                    this.WinningOwnSwitchOwnershipPercentageAuto == input.WinningOwnSwitchOwnershipPercentageAuto ||
                    (this.WinningOwnSwitchOwnershipPercentageAuto != null &&
                    this.WinningOwnSwitchOwnershipPercentageAuto.Equals(input.WinningOwnSwitchOwnershipPercentageAuto))
                ) && 
                (
                    this.WinningOwnSwitchOwnershipPercentageTeleop == input.WinningOwnSwitchOwnershipPercentageTeleop ||
                    (this.WinningOwnSwitchOwnershipPercentageTeleop != null &&
                    this.WinningOwnSwitchOwnershipPercentageTeleop.Equals(input.WinningOwnSwitchOwnershipPercentageTeleop))
                ) && 
                (
                    this.WinningScaleOwnershipPercentage == input.WinningScaleOwnershipPercentage ||
                    (this.WinningScaleOwnershipPercentage != null &&
                    this.WinningScaleOwnershipPercentage.Equals(input.WinningScaleOwnershipPercentage))
                ) && 
                (
                    this.WinningScaleOwnershipPercentageAuto == input.WinningScaleOwnershipPercentageAuto ||
                    (this.WinningScaleOwnershipPercentageAuto != null &&
                    this.WinningScaleOwnershipPercentageAuto.Equals(input.WinningScaleOwnershipPercentageAuto))
                ) && 
                (
                    this.WinningScaleOwnershipPercentageTeleop == input.WinningScaleOwnershipPercentageTeleop ||
                    (this.WinningScaleOwnershipPercentageTeleop != null &&
                    this.WinningScaleOwnershipPercentageTeleop.Equals(input.WinningScaleOwnershipPercentageTeleop))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoQuestAchieved != null)
                    hashCode = hashCode * 59 + this.AutoQuestAchieved.GetHashCode();
                if (this.AverageBoostPlayed != null)
                    hashCode = hashCode * 59 + this.AverageBoostPlayed.GetHashCode();
                if (this.AverageEndgamePoints != null)
                    hashCode = hashCode * 59 + this.AverageEndgamePoints.GetHashCode();
                if (this.AverageForcePlayed != null)
                    hashCode = hashCode * 59 + this.AverageForcePlayed.GetHashCode();
                if (this.AverageFoulScore != null)
                    hashCode = hashCode * 59 + this.AverageFoulScore.GetHashCode();
                if (this.AveragePointsAuto != null)
                    hashCode = hashCode * 59 + this.AveragePointsAuto.GetHashCode();
                if (this.AveragePointsTeleop != null)
                    hashCode = hashCode * 59 + this.AveragePointsTeleop.GetHashCode();
                if (this.AverageRunPointsAuto != null)
                    hashCode = hashCode * 59 + this.AverageRunPointsAuto.GetHashCode();
                if (this.AverageScaleOwnershipPoints != null)
                    hashCode = hashCode * 59 + this.AverageScaleOwnershipPoints.GetHashCode();
                if (this.AverageScaleOwnershipPointsAuto != null)
                    hashCode = hashCode * 59 + this.AverageScaleOwnershipPointsAuto.GetHashCode();
                if (this.AverageScaleOwnershipPointsTeleop != null)
                    hashCode = hashCode * 59 + this.AverageScaleOwnershipPointsTeleop.GetHashCode();
                if (this.AverageScore != null)
                    hashCode = hashCode * 59 + this.AverageScore.GetHashCode();
                if (this.AverageSwitchOwnershipPoints != null)
                    hashCode = hashCode * 59 + this.AverageSwitchOwnershipPoints.GetHashCode();
                if (this.AverageSwitchOwnershipPointsAuto != null)
                    hashCode = hashCode * 59 + this.AverageSwitchOwnershipPointsAuto.GetHashCode();
                if (this.AverageSwitchOwnershipPointsTeleop != null)
                    hashCode = hashCode * 59 + this.AverageSwitchOwnershipPointsTeleop.GetHashCode();
                if (this.AverageVaultPoints != null)
                    hashCode = hashCode * 59 + this.AverageVaultPoints.GetHashCode();
                if (this.AverageWinMargin != null)
                    hashCode = hashCode * 59 + this.AverageWinMargin.GetHashCode();
                if (this.AverageWinScore != null)
                    hashCode = hashCode * 59 + this.AverageWinScore.GetHashCode();
                if (this.BoostPlayedCounts != null)
                    hashCode = hashCode * 59 + this.BoostPlayedCounts.GetHashCode();
                if (this.ClimbCounts != null)
                    hashCode = hashCode * 59 + this.ClimbCounts.GetHashCode();
                if (this.FaceTheBossAchieved != null)
                    hashCode = hashCode * 59 + this.FaceTheBossAchieved.GetHashCode();
                if (this.ForcePlayedCounts != null)
                    hashCode = hashCode * 59 + this.ForcePlayedCounts.GetHashCode();
                if (this.HighScore != null)
                    hashCode = hashCode * 59 + this.HighScore.GetHashCode();
                if (this.LevitatePlayedCounts != null)
                    hashCode = hashCode * 59 + this.LevitatePlayedCounts.GetHashCode();
                if (this.RunCountsAuto != null)
                    hashCode = hashCode * 59 + this.RunCountsAuto.GetHashCode();
                if (this.ScaleNeutralPercentage != null)
                    hashCode = hashCode * 59 + this.ScaleNeutralPercentage.GetHashCode();
                if (this.ScaleNeutralPercentageAuto != null)
                    hashCode = hashCode * 59 + this.ScaleNeutralPercentageAuto.GetHashCode();
                if (this.ScaleNeutralPercentageTeleop != null)
                    hashCode = hashCode * 59 + this.ScaleNeutralPercentageTeleop.GetHashCode();
                if (this.SwitchOwnedCountsAuto != null)
                    hashCode = hashCode * 59 + this.SwitchOwnedCountsAuto.GetHashCode();
                if (this.UnicornMatches != null)
                    hashCode = hashCode * 59 + this.UnicornMatches.GetHashCode();
                if (this.WinningOppSwitchDenialPercentageTeleop != null)
                    hashCode = hashCode * 59 + this.WinningOppSwitchDenialPercentageTeleop.GetHashCode();
                if (this.WinningOwnSwitchOwnershipPercentage != null)
                    hashCode = hashCode * 59 + this.WinningOwnSwitchOwnershipPercentage.GetHashCode();
                if (this.WinningOwnSwitchOwnershipPercentageAuto != null)
                    hashCode = hashCode * 59 + this.WinningOwnSwitchOwnershipPercentageAuto.GetHashCode();
                if (this.WinningOwnSwitchOwnershipPercentageTeleop != null)
                    hashCode = hashCode * 59 + this.WinningOwnSwitchOwnershipPercentageTeleop.GetHashCode();
                if (this.WinningScaleOwnershipPercentage != null)
                    hashCode = hashCode * 59 + this.WinningScaleOwnershipPercentage.GetHashCode();
                if (this.WinningScaleOwnershipPercentageAuto != null)
                    hashCode = hashCode * 59 + this.WinningScaleOwnershipPercentageAuto.GetHashCode();
                if (this.WinningScaleOwnershipPercentageTeleop != null)
                    hashCode = hashCode * 59 + this.WinningScaleOwnershipPercentageTeleop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
